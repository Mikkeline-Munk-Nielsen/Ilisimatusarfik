theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = mpg) +
geom_histogram(fill = "#003366") +
labs(
title = "Histogram af brændstoføkonomi",
x = "Miles per gallon (mpg)",
y = "Antal biler"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = "", y = mpg) +  # "" for at undgå en x-akse kategori, og y for at angive mpg
geom_boxplot(fill = "#003366", color = "black") +  # Ændring af farver
labs(
title = "Boksplot af brændstoføkonomi",
x = "",  # Tomt for at undgå en x-akse etiket
y = "Miles per gallon (mpg)"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), fill = factor(gear)) +
geom_bar(position = "dodge") +
labs(
title = "Fordeling af biler pr. cylinder og gear",
x = "Antal cylindre",
y = "Antal biler",
fill = "Antal gear"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = factor(gear)) +
geom_jitter(width = 0.2, height = 0.2) +
labs(
title = "Spredning af biler mellem cylinder og gear",
x = "Antal cylindre",
y = "Antal gear"
)
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = mpg) +
geom_boxplot() +
labs(
title = "Brændstoføkonomi pr. cylinder",
x = "Antal cylindre",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
library(janitor)
tabyl(df, udd)
library(DescTools)
Mode(df$udd, na.rm = TRUE)
Mean(df$alder, na.rm = T)
Median(df$alder, na.rm=T)
quantile(df$alder, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
summary(df$alder)
Var(df$alder, na.rm = TRUE)
sd(df$alder, na.rm = TRUE)
mean(df$alder)
t.test(df$alder, mu = 42.8)
# Opret en data frame med de ønskede metrics i rækker
resultat_df <- data.frame(
Metric = c("Gennemsnit",                  # Gennemsnittet af prøven
"Test-statistik",              # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),             # Frihedsgrader (df)
Value = c(
round(ttest_resultat$estimate, 3),        # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
)
# Indlæs nødvendige pakker
library(broom)
library(dplyr)
# Kør testen og gem resultaterne i et objekt
ttest_resultat <- t.test(df$alder, mu = 42.8)
# Opret en data frame med de ønskede metrics i rækker
resultat_df <- data.frame(
Metric = c("Gennemsnit",                  # Gennemsnittet af prøven
"Test-statistik",              # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),             # Frihedsgrader (df)
Value = c(
round(ttest_resultat$estimate, 3),        # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
)
# Udskriv tabellen i konsollen
print(resultat_df)
# Eksporter tabellen til en CSV-fil
write.csv(resultat_df, "t_test_resultat.csv", row.names = FALSE)
t.test(df$alder)
names(df)
tabyl(df$udd)
(chi_test <- chisq.test(x = observeret, p = forventet_andele))
observeret <- c(3087, 4501, 3934, 2148)
forventet_andele <- c(0.15, 0.30, 0.30, 0.25)  # Din forventede fordeling
(chi_test <- chisq.test(x = observeret, p = forventet_andele))
chi_test <- chisq.test(x = observeret, p = forventet_andele)
(chi_table <- data.frame(
Parameter = c("Chi-squared", "Degrees of Freedom", "p-value"),
Værdi = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
))
(chi_tabel <- data.frame(
Parameter = c("Chi-squared", "Frihedsgrader", "p-værdi"),
Værdi = c(formatC(chi_test$statistic, format = "f", digits = 3),  # Chi-squared værdi
chi_test$parameter,                                     # Frihedsgrader
formatC(chi_test$p.value, format = "f", digits = 3))    # p-værdi
)
)
(chi_tabel <- data.frame(
Parameter = c("Chi-squared", "Frihedsgrader", "p-værdi"),
Værdi = c(formatC(chi_test$statistic, format = "f", digits = 3),  # Chi-squared værdi
chi_test$parameter,                                     # Frihedsgrader
formatC(chi_test$p.value, format = "f", digits = 3))    # p-værdi
))
0.3*(1-0.3)
sqrt(0.21/10)
0.3-1.96
-1.66*0.1449138
sqrt(0.021)
1.96*0.1449
getwd()
# Titanic dataset fra utils (kan konverteres til data frame for nem analyse)
data("Titanic")
# Konverter Titanic til data frame
titanic_df <- as.data.frame(Titanic)
# Titanic dataset fra utils (kan konverteres til data frame for nem analyse)
df <- data("Titanic")
# Titanic dataset fra utils (kan konverteres til data frame for nem analyse)
df <- data("Titanic")
# Titanic dataset fra utils (kan konverteres til data frame for nem analyse)
df <- data("Titanic")
# Konverter Titanic til data frame
titanic_df <- as.data.frame(Titanic)
df <- as.data.frame(data("Titanic"))
df <- as.data.frame(data("Titanic"))
titanic_df <- as.data.frame(Titanic)
df <- as.data.frame(Titanic)
names(df)
df <- as.data.frame(Titanic)
library(janitor)
tabyl(df, Class, Survived)
tabyl(df$Class)
tabyl(df$Survived)
brary(tibble)
library(tibble)
library(ggplot2)
Titanic <- Titanic
Titanic <- Titanic
Titanic <- as.tibble(Titanic)
View(Titanic)
data("Titanic")
# Konverter Titanic til data frame
titanic_df <- as.data.frame(Titanic)
# Indlæs Titanic-datasættet og konverter til en data frame
titanic_df <- as.data.frame(Titanic)
# Udvid datasættet, så hver passager bliver en individuel række
titanic_unaggregated <- titanic_df[rep(seq_len(nrow(titanic_df)), titanic_df$Freq), 1:4]
# Kontroller det nye datasæt
head(titanic_unaggregated)
View(titanic_unaggregated)
data("Titanic")
# Indlæs Titanic-datasættet og konverter til en data frame
titanic_df <- as.data.frame(Titanic)
# Udvid datasættet, så hver passager bliver en individuel række
df <- titanic_df[rep(seq_len(nrow(titanic_df)), titanic_df$Freq), 1:4]
# Kontroller det nye datasæt
head(df)
library(janitor)
tabyl(df, class, survived)
tabyl(df, Class, survived)
names(df)
tabyl(df, Class, Survived)
data("Titanic")
# Indlæs Titanic-datasættet og konverter til en data frame
titanic_df <- as.data.frame(Titanic)
# Udvid datasættet, så hver passager bliver en individuel række
df <- titanic_df[rep(seq_len(nrow(titanic_df)), titanic_df$Freq), 1:4]
library(janitor)
tabyl(df, Class, Survived)
library(janitor)
tabyl(df, Class, Survived) %>% adorn_totals(where = c("row", "col"))
library(janitor)
tabyl(df, Class, Survived) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages()
library(janitor)
tabyl(df, Class, Survived) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 2)
library(janitor)
tabyl(df, Class, Survived) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 0)
library(janitor)
tabyl(df, Class, Survived) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 0)
library(janitor)
tabyl(df, Class, Survived) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
library(janitor)
tabyl(df, Survived)
ESS <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds")
ESS <- readRDS("C:\Users\mmn\Dropbox\Ilisimatusarfik\R\Ilisimatusarfik_Statistik_EO_F24\Data\ESS.rds")
ESS <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds")
names(ESS)
library(DescTools)
krydstabel <- table(as.character(ESS$konn),
as.character(ESS$ansaettelse_type)
)
krydstabel <- table(as.character(ESS$koen),
as.character(ESS$ansaettelse_type)
)
CramerV(krydstabel)
ESS <- filter(ESS, land=="DK")
ESS <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds")
names(ESS)
ESS <- filter(ESS, land=="DK")
library(dplyr)
ESS <- filter(ESS, land=="DK")
krydstabel <- table(as.character(ESS$koen),
as.character(ESS$ansaettelse_type)
)
CramerV(krydstabel)
krydstabel
library(dplyr)
ESS <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds")
library(DescTools)
krydstabel <- table(as.character(ESS$koen),
as.character(ESS$ansaettelse_type)
)
krydstabel
CramerV(krydstabel)
ESS_filter <-
ESS %>%
filter(køn %in% c("Mand", "Kvinde")) %>%
filter(! vigtighed_arbejde %in% c("Ved ikke", "Nægter at svare"))
tabyl(ESS$koen)
tabyl(ESS$ansaettelse_type)
CramerV(krydstabel)
names(ESS)
cor.test(as.numeric(ESS$udd),
as.numeric(ESS$udd_partner),
method = "spearman"
)
names(diamonds)
names(ESS)
cor.test(ESS$udd_aar, ESS$net_indkomst)
cor.test(ESS$udd_aar, ESS$net_indkomst)
df <- filter(ESS, land=="DK")
cor.test(df$udd_aar, df$net_indkomst)
cor.test(as.numeric(df$udd),
as.numeric(df$udd_partner),
method = "spearman")
krydstabel <- table(as.character(df$koen),
as.character(df$ansaettelse_type))
library(DescTools)
CramerV(krydstabel)
krydstabel <- table(as.character(ESS$koen),
as.character(ESS$ansaettelse_type))
library(DescTools)
CramerV(krydstabel)
ESS <- filter(ESS, land=="DK")
krydstabel <- table(as.character(ESS$koen),
as.character(ESS$ansaettelse_type))
library(DescTools)
CramerV(krydstabel)
cor.test(as.numeric(ESS$udd),
as.numeric(ESS$udd_partner),
method = "spearman")
cor.test(ESS$udd_aar, ESS$net_indkomst)
t.test(net_indkomst ~ koen, data=ESS)
names(ESS)
ESS <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds")
t.test(net_indkomst ~ koen, data=ESS)
data("Titanic")
# Indlæs Titanic-datasættet og konverter til en data frame
titanic_df <- as.data.frame(Titanic)
# Udvid datasættet, så hver passager bliver en individuel række
df <- titanic_df[rep(seq_len(nrow(titanic_df)), titanic_df$Freq), 1:4]
library(janitor)
tabyl(df, Survived)
library(janitor)
tabyl(df, Class, Survived)
library(janitor)
tabyl(df, Class, Survived) %>% adorn_totals(where = c("row", "col"))
library(janitor)
tabyl(df, Class, Survived) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
library(dplyr)
ESS <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds")
ESS <- filter(ESS, land=="DK")
krydstabel <- table(as.character(ESS$koen),
as.character(ESS$ansaettelse_type))
library(DescTools)
CramerV(krydstabel)
cor.test(as.numeric(ESS$udd),
as.numeric(ESS$udd_partner),
method = "spearman")
cor.test(ESS$udd_aar, ESS$net_indkomst)
t.test(net_indkomst ~ koen, data=ESS)
# Eksempel: Udfør t-test
resultat <- t.test(net_indkomst ~ koen, data = ESS)
# Udtræk komponenter og formatér til en tabel
t_test_tabel <- data.frame(
Statistik = round(resultat$statistic, 3),  # t-værdi
`Frihedsgrader` = round(resultat$parameter, 3),  # df
`Gennemsnit (Gruppe 1)` = round(resultat$estimate[1], 3),  # Gennemsnit for Gruppe 1
`Gennemsnit (Gruppe 2)` = round(resultat$estimate[2], 3),  # Gennemsnit for Gruppe 2
`Konfidensinterval (Nedre)` = round(resultat$conf.int[1], 3),  # Nedre grænse for CI
`Konfidensinterval (Øvre)` = round(resultat$conf.int[2], 3),  # Øvre grænse for CI
`p-værdi` = signif(resultat$p.value, 3)  # p-værdi
)
# Vis tabel
print(t_test_tabel)
t.test(net_indkomst ~ koen, data=ESS)
ESS %>%
select(udd, fair_ekon_ulighed) %>%
na.omit() %>%
tabyl(udd, fair_ekon_ulighed) %>%
chisq.test()
ESS %>%
select(udd, ansaettelse_type) %>%
na.omit() %>%
tabyl(udd, ansaettelse_type) %>%
chisq.test()
tabyl(ESS$ansaettelse_type)
tabyl(ESS$udd)
ESS %>%
select(udd, fair_ekon_ulighed) %>%
na.omit() %>%
tabyl(udd, fair_ekon_ulighed) %>%
chisq.test()
udd, ansaettelse_type
ESS %>%
select(udd, fair_ekon_ulighed) %>%
na.omit() %>%
tabyl(udd, fair_ekon_ulighed) %>%
chisq.test()
names(ESS)
ESS %>%
select(udd, ansaettelse_type) %>%
na.omit() %>%
tabyl(udd, ansaettelse_type) %>%
chisq.test()
View(diamonds)
df <- diamonds
names(df)
summary(df$carat)
tabyl(df$color)
tabyl(df$clarity)
df <- diamonds
names(df)
getwd()
---
title: "Kodeoversigt"
data("Titanic")
Mean(df$alder, na.rm = T)
Mean(df$alder, na.rm = T)
library(ggplot2)
df <- diamonds
names(df)
Mean(df$price, na.rm = T)
library(dplyr)
Mean(df$price, na.rm = T)
library(DescTools)
Mean(df$price, na.rm = T)
Median(df$price, na.rm=T)
library(DescTools)
Mean(df$price, na.rm = T)
Median(df$price, na.rm=T)
ggplot(df) +
aes(x = factor(cut)) +  # Omform cyl til en kategorisk variabel
geom_bar(fill = "#003366") +
labs(
title = "Antal biler pr. antal cylindere",
x = "Antal cylindre",
y = "Antal biler"
) +
theme_minimal()
getwd()
t.test(df$l7afoodhunt)
df <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/Undervisningsdokumenter/E24/slides/data/GL_perspektiver.rds")
names(df)
t.test(df$l7afoodhunt)
