fagforening = ifelse(fagforeningsmedlem=="Ja",1,0))
View(df)
model1 <- lm(net_indkomst ~ udd_aar, data = df)
model2 <- lm(net_indkomst ~ udd_aar + alder, data = df)
model3 <- lm(net_indkomst ~ udd_aar + alder + fagforening, data = df)
(texreg::screenreg(list(model1, model2, model3), include.ci=F))
mit_foerste_objekt <- "Hello world!"
mit_foerste_objekt
mit_tal <- 2
mit_tal
mit_tal + 2
resultat <- mit_tal + 2
resultat
getwd()
df <- readRDS("firma_data.rds")
names(df)
df <- data.frame(
køn = c("Mand", "Kvinde", "Mand", "Kvinde"),
tid = c(2020, 2020, 2021, 2021),
"Befolkningen 1. januar" = c(2750000, 2850000, 2780000, 2870000)
)
names(df)
library(janitor)
df <- clean_names(df)
names(df)
library(tidyverse)
df <- df %>% rename(koen = kon)
names(df)
df <- readRDS("Undervisningsdokumenter/E24/slides/data/ESS.rds")
library(tidyverse)
df <- df %>% select(koen, alder, udd, net_indkomst)
names(df)
df <- df %>% mutate(alder2 = alder^2)
df <- df %>%
mutate(myndig = if_else(alder >= 18,
"Myndig", # Kategori vis den binære betingelse er sand.
"Ikke myndig")) # Kategori hvis den binære betingelse ikke er sand.
df <- df %>%
mutate(alder_kategori = case_when(
between(alder, 15, 35) ~ "15-35 år",
between(alder, 36, 55) ~ "36-55år ",
between(alder, 56, 75) ~ "56-75 år",
alder > 75 ~ "75 +"
))
df <- df %>% mutate(gender = fct_recode(koen, "Male" = "Mand", "Female" = "Kvinde"))
ny_df <- df %>% select(koen, net_indkomst)
kvinde_df <- df %>% filter(koen=="Kvinde")
library(janitor)
tabyl(df$koen)
df <- df %>% mutate(
mand = ifelse(koen=="Mand",1,0),
kvinde = ifelse(koen=="Kvinde",1,0))
df %>% select(koen, mand, kvinde) %>% head
mtcars
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl)) +  # Omform cyl til en kategorisk variabel
geom_bar(fill = "#003366") +
labs(
title = "Antal biler pr. antal cylindere",
x = "Antal cylindre",
y = "Antal biler"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = mpg) +
geom_histogram(fill = "#003366") +
labs(
title = "Histogram af brændstoføkonomi",
x = "Miles per gallon (mpg)",
y = "Antal biler"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = "", y = mpg) +  # "" for at undgå en x-akse kategori, og y for at angive mpg
geom_boxplot(fill = "#003366", color = "black") +  # Ændring af farver
labs(
title = "Boksplot af brændstoføkonomi",
x = "",  # Tomt for at undgå en x-akse etiket
y = "Miles per gallon (mpg)"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), fill = factor(gear)) +
geom_bar(position = "dodge") +
labs(
title = "Fordeling af biler pr. cylinder og gear",
x = "Antal cylindre",
y = "Antal biler",
fill = "Antal gear"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = factor(gear)) +
geom_jitter(width = 0.2, height = 0.2) +
labs(
title = "Spredning af biler mellem cylinder og gear",
x = "Antal cylindre",
y = "Antal gear"
)
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = mpg) +
geom_boxplot() +
labs(
title = "Brændstoføkonomi pr. cylinder",
x = "Antal cylindre",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "MPG"
) +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
library(janitor)
tabyl(df, udd)
data("Titanic")
# Indlæs Titanic-datasættet og konverter til en data frame
titanic_df <- as.data.frame(Titanic)
# Udvid datasættet, så hver passager bliver en individuel række
titanic <- titanic_df[rep(seq_len(nrow(titanic_df)), titanic_df$Freq), 1:4]
library(janitor)
tabyl(titanic, Class, Survived)
library(janitor)
tabyl(titanic, Class, Survived) %>% adorn_totals(where = c("row", "col"))
library(janitor)
tabyl(titanic, Class, Survived) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
library(DescTools)
Mode(df$udd, na.rm = TRUE)
library(DescTools)
Mean(df$alder, na.rm = T)
library(DescTools)
Median(df$alder, na.rm=T)
quantile(df$alder, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
summary(df$alder)
Var(df$alder, na.rm = TRUE)
sd(df$alder, na.rm = TRUE)
t.test(df$alder)
ttest_resultat_univariat <- t.test(df$alder, mu = 42.8)
# Opret en data frame med de ønskede metrics i rækker
(ttest_tabel_univariat <- data.frame(
Parameter = c("Gennemsnit",                # Gennemsnittet af prøven
"Test-statistik",               # Teststatistikken (t-værdien)
"P-værdi",                      # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),               # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat_univariat$estimate, 3),       # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat_univariat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat_univariat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat_univariat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_univariat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_univariat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
))
library(janitor)
tabyl(df$udd)
observeret <- c(3087, 4501, 3934, 2148)
forventet_andele <- c(0.15, 0.30, 0.30, 0.25)
chi_test_univariat <- chisq.test(x = observeret, p = forventet_andele)
# Formatér test-resultater og gem som tabel
(chi_tabel_univariat <- data.frame(
Parameter = c("Chi-squared", "Frihedsgrader", "p-værdi"),
Værdi = c(formatC(chi_test_univariat$statistic, format = "f", digits = 3),  # Chi-squared værdi
chi_test_univariat$parameter,                                     # Frihedsgrader
formatC(chi_test_univariat$p.value, format = "f", digits = 3))    # p-værdi
))
library(writexl)
write.csv(chi_tabel_univariat, "chi_test_univariat.csv", row.names = FALSE)
library(dplyr)
ESS <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds")
ESS <- filter(ESS, land=="DK")
krydstabel <- table(as.character(ESS$koen),
as.character(ESS$ansaettelse_type))
library(DescTools)
CramerV(krydstabel)
cor.test(as.numeric(ESS$udd),
as.numeric(ESS$udd_partner),
method = "spearman")
cor.test(ESS$udd_aar, ESS$net_indkomst)
# Udfør t-test
ttest_resultat_bivariat <- t.test(net_indkomst ~ koen, data = ESS)
# Opret en tabel med resultaterne
(ttest_tabel_bivariat <- data.frame(
Parameter = c("Gennemsnit Gruppe 1",        # Gennemsnit for første gruppe
"Gennemsnit Gruppe 2",        # Gennemsnit for anden gruppe
"Test-statistik",             # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien
"Nedre konfidensinterval",    # Nedre konfidensinterval
"Øvre konfidensinterval",     # Øvre konfidensinterval
"Frihedsgrader"),             # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat_bivariat$estimate[1], 2),     # Gennemsnittet for første gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$estimate[2], 2),     # Gennemsnittet for anden gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$statistic, 3),       # Teststatistikken afrundet til 3 decimaler
sprintf("%.4f", ttest_resultat_bivariat$p.value),  # P-værdien med 4 decimaler
round(ttest_resultat_bivariat$conf.int[1], 3),     # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$conf.int[2], 3),     # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$parameter, 1)        # Frihedsgrader afrundet til 1 decimal
)
))
library(writexl)
write.csv(ttest_tabel_bivariat, "t_test_resultat_bivariat.csv", row.names = FALSE)
library(dplyr)
library(janitor)
# Udfør chi²-test
chi_resultat_bivariat <- ESS %>%
select(udd, ansaettelse_type) %>%
na.omit() %>%
tabyl(udd, ansaettelse_type) %>%
chisq.test()
# Opret en data frame med chi²-testens resultater
(chi_tabel_bivariat <- data.frame(
Parameter = c("Chi²-statistik",              # Testens Chi²-statistik
"Frihedsgrader",              # Frihedsgrader (df)
"P-værdi"),                   # P-værdi
Værdi = c(
round(chi_resultat_bivariat$statistic, 3),         # Chi²-statistikken afrundet til 3 decimaler
chi_resultat_bivariat$parameter,                   # Frihedsgrader
sprintf("%.4f", chi_resultat_bivariat$p.value)    # P-værdien formatteret til 4 decimaler
)))
library(tidyverse)
df <- ESS %>% select(net_indkomst, udd_aar, alder, fagforeningsmedlem) %>% na.omit()
model1 <- lm(net_indkomst ~ udd_aar, data = df)
library(texreg)
(texreg::screenreg(list(model1), include.ci=F))
model2 <- lm(net_indkomst ~ udd_aar + alder, data = df)
library(texreg)
(texreg::screenreg(list(model2), include.ci=F))
df <- df %>% mutate(
fagforening = ifelse(fagforeningsmedlem=="Ja",1,0))
# Beregn forudsagte værdier
predicted <- predict(model3)
# Beregn residualer
residuals <- resid(model3)
# Lav plot dataframe
plot_data <- data.frame(predicted = predicted, residuals = residuals)
# Opret et plot for heteroskedasticitet
ggplot(plot_data, aes(x = predicted, y = residuals)) +
geom_point(shape = 20, color = "black") + # Sæt punktform og farve (runde, sorte punkter)
labs(
x = "Forudsagte værdier",            # Navn til x-aksen
y = "Residualer",                    # Navn til y-aksen
title = "Plot for heteroskedasticitet" # Titel til plottet
) +
theme_minimal() +                      # Brug et minimalistisk tema
theme(
plot.title = element_text(hjust = 0.5)) # Centrér titlen vandret (hjust = 0.5)
get(wd)
getwd()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = factor(gear)) +
geom_jitter(width = 0.2, height = 0.2) +
labs(
title = "Spredning af biler mellem cylinder og gear",
x = "Antal cylindre",
y = "Antal gear"
) + theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
mit_foerste_objekt <- "Hello world!"
mit_foerste_objekt
mit_tal <- 2
mit_tal
mit_tal + 2
resultat <- mit_tal + 2
resultat
getwd()
df <- readRDS("firma_data.rds")
names(df)
df <- data.frame(
køn = c("Mand", "Kvinde", "Mand", "Kvinde"),
tid = c(2020, 2020, 2021, 2021),
"Befolkningen 1. januar" = c(2750000, 2850000, 2780000, 2870000)
)
names(df)
library(janitor)
df <- clean_names(df)
names(df)
library(tidyverse)
df <- df %>% rename(koen = kon)
names(df)
df <- readRDS("Undervisningsdokumenter/E24/slides/data/ESS.rds")
library(tidyverse)
df <- df %>% select(koen, alder, udd, net_indkomst)
names(df)
df <- df %>% mutate(alder2 = alder^2)
df <- df %>%
mutate(myndig = if_else(alder >= 18,
"Myndig", # Kategori vis den binære betingelse er sand.
"Ikke myndig")) # Kategori hvis den binære betingelse ikke er sand.
df <- df %>%
mutate(alder_kategori = case_when(
between(alder, 15, 35) ~ "15-35 år",
between(alder, 36, 55) ~ "36-55år ",
between(alder, 56, 75) ~ "56-75 år",
alder > 75 ~ "75 +"
))
df <- df %>% mutate(gender = fct_recode(koen, "Male" = "Mand", "Female" = "Kvinde"))
ny_df <- df %>% select(koen, net_indkomst)
kvinde_df <- df %>% filter(koen=="Kvinde")
df %>% group_by(udd) %>%
summarise(Gennemsnitsindkomst = mean(net_indkomst, na.rm = TRUE),
N = n())
mit_foerste_objekt <- "Hello world!"
mit_foerste_objekt
mit_tal <- 2
mit_tal
mit_tal + 2
resultat <- mit_tal + 2
resultat
getwd()
df <- readRDS("firma_data.rds")
names(df)
glimpse(df)
