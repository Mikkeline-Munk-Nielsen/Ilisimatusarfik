min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 500000, sd = input$variance)  # Mean income now set to 500,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(aes(y = ..density..), binwidth = 10000, fill = "blue", color = "white", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 500000, sd = input$variance), color = "red", size = 1) +  # Red normal distribution curve with mean 500,000 DKK
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Density") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
(df <- readRDS("firma_data.rds"))
library(janitor)
tabyl(df, industri)
library(ggplot2)
ggplot(df, aes(x = industri)) +
geom_bar(fill = "#003366", na.rm = FALSE) +
labs(
x = "Industri",
y = "Frekvens") +
theme(
text = element_text(size = 14))  # Gør skriften større
library(janitor)
tabyl(df, industri)
library(ggplot2)
ggplot(df, aes(x = industri)) +
geom_bar(aes(y = (..count..) / sum(..count..) * 100),
fill = "#003366", na.rm = FALSE) +
labs(
x = "Industri",
y = "Procent") +
theme(
text = element_text(size = 14))  # Gør skriften større
library(dplyr)
library(ggplot2)
# Beregn procenterne manuelt
df_pie <- df %>%
group_by(industri) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Opret cirkeldiagrammet med procenter og hvid tekst
ggplot(df_pie, aes(x = "", y = percentage, fill = factor(industri))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white") +  # Gør teksten hvid
labs(x = NULL, y = NULL, fill = "Industri") +
theme_void() +  # Fjerner akse-linjer og labels
scale_fill_manual(values = c("#003366", "#6699CC", "#336699", "#99CCFF", "#0066CC"))  # Blå farver
library(ggplot2)
library(dplyr)
df <- df %>%
mutate(ansatte_gruppe = case_when(
ansatte <= 1000 ~ "0 - 1k",
ansatte > 1000 & ansatte <= 2000 ~ "1k - 2k",
ansatte > 2000 & ansatte <= 3000 ~ "2k - 3k",
ansatte > 3000 & ansatte <= 4000 ~ "3k - 4k",
ansatte > 4000 ~ "4k+"
))
# Opret barplot med de rigtige aldersgrupper på x-aksen
ggplot(df, aes(x = ansatte_gruppe)) +
geom_bar(aes(y = cumsum(..count..) / sum(..count..) * 100),
stat = "count", fill = "#003366") +
labs(
x = "Ansatte",
y = "Kumulativ andel") +
scale_x_discrete(drop = FALSE) + # Vis alle kategorier
theme(
text = element_text(size = 14))  # Gør skriften større
library(DescTools)
(mode <- Mode(df$industri, na.rm = TRUE))
Mean(df$omsaetning, na.rm = T)
Median(df$omsaetning, na.rm=T)
quantile(df$omsaetning, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
library(ggplot2)
ggplot(df, aes(x = omsaetning)) + # Variabel = omsaetning
geom_boxplot() +  # Opretter et boxplot
theme_minimal() + # Tema
scale_x_continuous(breaks = # Definerer x-aksen
seq(min(50000),
max(1000000),
by = 100000)) +
labs(
x = "Omsætning (DKK)") + # Tilføjer en brugerdefineret titel til x-aksen
theme(
axis.text.y = element_blank(),  # Fjerner værdierne på y-aksen
axis.ticks.y = element_blank(),  # Fjerner stregmarkeringer på y-aksen
text = element_text(size = 14)) +  # Gør skriften større
coord_fixed(ratio = 300000)  # Justér på højden af boksplottet
summary(df$omsaetning)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
ggplot(mtcars) +
aes(x = factor(cyl)) +  # Omform cyl til en kategorisk variabel
geom_bar() +
labs(
title = "Antal biler pr. antal cylindere",
x = "Antal cylindre",
y = "Antal biler"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = mpg) +
geom_histogram(binwidth = 2, fill = "#003366", color = "black") +
labs(
title = "Histogram af brændstoføkonomi",
x = "Miles per gallon (mpg)",
y = "Antal biler"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = factor(cyl), fill = factor(gear)) +
geom_bar(position = "dodge") +
labs(
title = "Fordeling af biler pr. cylinder og gear",
x = "Antal cylindre",
y = "Antal biler",
fill = "Antal gear"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = factor(cyl), y = factor(gear)) +
geom_jitter(width = 0.2, height = 0.2) +
labs(
title = "Spredning af biler mellem cylinder og gear",
x = "Antal cylindre",
y = "Antal gear"
)
ggplot(mtcars) +
aes(x = factor(cyl), y = mpg) +
geom_boxplot() +
labs(
title = "Brændstoføkonomi pr. cylinder",
x = "Antal cylindre",
y = "Miles per gallon"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8)
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8,  device = "cairo")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8,  device = "cairo")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = "cairo_png")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = "cairo_png")
install.packages("Cairo")
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = "cairo_png")
library(Cairo)
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = "cairo_png")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = "png")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = CairoPNG)
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(Cairo)
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = CairoPNG)
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8)
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, type="cairo")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, type="cairo")
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggsave("mit_plot.png", plot = mit_ggplot_objekt, type="cairo")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = CairoPNG)
ggsave("mit_plot.png", plot = mit_ggplot_objekt, type = "cairo-png")
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(Cairo)
ggsave("mit_plot.png", plot = mit_ggplot_objekt, type = "cairo-png")
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = ragg::agg_png)
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8, device = ragg::agg_png)
ggsave("mit_plot.png", p, device = ragg::agg_png, res = 300, units = "in")
ggsave("mit_plot.png",  plot = mit_ggplot_objekt, device = ragg::agg_png, res = 300, units = "in")
ggsave(plot= mit_ggplot_objekt, file = "mit_plot.png")
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
png("mit_plot.png", width = 1000, height = 800, res = 150)  # Set width, height, and resolution
print(mit_ggplot_objekt)  # Print the plot to the file
dev.off()  # Close the device
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggsave("mit_plot.png", plot = mit_ggplot_objekt, width = 10, height = 8)
ggsave("mit_plot.jpeg", plot = mit_ggplot_objekt, width = 10, height = 8)
mit_ggplot_objekt <- ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
# Gem mit plot i R-project mappen på computeren
ggsave("mit_plot.jpeg", plot = mit_ggplot_objekt, width = 10, height = 8)
df <- readRDS("firma_data.rds")
getwd()
firma_data <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/firma_data.rds")
df <- readRDS("Undervisningsdokumenter/E24/Slides/firma_data.rds")
df <- readRDS("/Undervisningsdokumenter/E24/Slides/firma_data.rds")
getwd()
df <- readRDS("firma_data.rds")
names(df)
tabyl(df$tilfredshed)
library(janitor)
tabyl(df$tilfredshed)
library(ggplot2)
ggplot(df) +
aes(x = factor(tilfredshed)) +
geom_bar() +
labs(
title = "Tilfredshed med omsætning",
x = "Tilfredshed",
y = "Antal firmaer"
) +
theme_minimal()
library(DescTools)
(mode <- Mode(df$industri, na.rm = TRUE))
Mean(df$omsaetning)
Median(df$omsaetning)
ggplot(df, aes(x = omsaetning)) + # Variabel = omsaetning
geom_boxplot() +  # Opretter et boxplot
theme_minimal() + # Tema
scale_x_continuous(breaks = # Definerer x-aksen
seq(min(50000),
max(1000000),
by = 100000)) +
labs(
x = "Omsætning (DKK)") + # Tilføjer en brugerdefineret titel til x-aksen
theme(
axis.text.y = element_blank(),  # Fjerner værdierne på y-aksen
axis.ticks.y = element_blank(),  # Fjerner stregmarkeringer på y-aksen
text = element_text(size = 14)) +  # Gør skriften større
coord_fixed(ratio = 300000)  # Justér på højden af boksplottet
ggplot(df, aes(x = omsaetning)) + # Variabel = omsaetning
geom_boxplot() +  # Opretter et boxplot
theme_minimal()
ggplot(df, aes(x = ansatte)) + # Variabel = omsaetning
geom_boxplot() +  # Opretter et boxplot
theme_minimal()
ggplot(df, aes(x = ansatte)) + # Variabel = omsaetning
geom_boxplot() +  # Opretter et boxplot
theme_minimal()
ggplot(mtcars) +
aes(x = "", y = mpg) +  # "" for at undgå en x-akse kategori, og y for at angive mpg
geom_boxplot(fill = "#003366", color = "black") +  # Ændring af farver
labs(
title = "Boksplot af brændstoføkonomi",
x = "",  # Tomt for at undgå en x-akse etiket
y = "Miles per gallon (mpg)"
) +
theme_minimal()
avn <- "Mikkeline"
# Her er min alder
alder <- 27
# Her indlæses firma-datasættet
df_firma <- readRDS("firma_data.rds")
View(df_firma)
names(df_firma)
# Lav en ny variabel, der måler omsaetning i 1.000 kr
(df <- df %>% mutate(omsaetning_1000 = omsaetning/1000))
library(tidyverse)
library(dplyr)
# Lav en ny variabel, der måler omsaetning i 1.000 kr
(df <- df %>% mutate(omsaetning_1000 = omsaetning/1000))
# Lav en ny variabel, der måler omsaetning i 1.000 kr
(df_firma <- df_firma %>% mutate(omsaetning_1000 = omsaetning/1000))
# Lav en dikotom variabel der tager værdien 1, hvis firmaerne har erklæret sig “tilfreds” eller “meget tilfreds” med deres omsætning, ellers skal den tage værdien 0
df_firma <- df_firma %>%
mutate(tilfreds_binear = ifelse(tilfredshed %in% c("Tilfreds", "Meget tilfreds"), 1, 0))
# Lav et nyt datasæt kun med virksomheder fra sundhedsindustrien
df_sunhed <- df_firma %>% filter(industri=="Sundhed")
# Lav et nyt datasæt kun med firmaer, der har erklæret sig “tilfreds” eller “meget tilfreds” med deres omsætning (dvs. firmaer med værdien 1 på den variabel I lavede ovenfor)
df_sunhed <- df_firma %>% filter(tilfreds_binear==1)
navn <- "Mikkeline"
alder <- 27
df_firma <- readRDS("firma_data.rds")
View(df_firma)
names(df_firma)
library(tidyverse)
library(dplyr)
df_firma <- df_firma %>% mutate(omsaetning_1000 = omsaetning/1000)
