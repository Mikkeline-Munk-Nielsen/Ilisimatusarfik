axis.title = element_text(size = 14)
)
# Load nødvendige pakker
library(ggplot2)
# Definér parametre
df <- 5  # Antal frihedsgrader
x_values <- seq(0, 20, by = 0.1)  # x-akse værdier (range for χ²)
# Beregn tæthedsfunktion (density) for χ²-fordelingen
density_values <- dchisq(x_values, df = df)
# Opret en data frame til ggplot
data <- data.frame(
x = x_values,
density = density_values
)
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),  # Centrér titlen
axis.title = element_text(size = 14)
)
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
labs(
x = "chi^2",
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),  # Centrér titlen
axis.title = element_text(size = 14)
)
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
labs(
x = "$\chi^2$",
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
labs(
x = "$\Chi^2$",
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
labs(
x = "chi^2",
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),  # Centrér titlen
axis.title = element_text(size = 14)
)
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
labs(
x = bquote(chi^2),
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),  # Centrér titlen
axis.title = element_text(size = 14)
)
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
labs(
x = bquote(chi^2),
y = "Tæthed"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),  # Centrér titlen
axis.title = element_text(size = 14)
)
# Load nødvendige pakker
library(ggplot2)
# Definér parametre
df <- 5  # Antal frihedsgrader
x_values <- seq(0, 20, by = 0.1)  # x-akse værdier (range for χ²)
# Beregn tæthedsfunktion (density) for χ²-fordelingen
density_values <- dchisq(x_values, df = df)
# Opret en data frame til ggplot
data <- data.frame(
x = x_values,
density = density_values
)
# Plot χ²-fordelingen
ggplot(data, aes(x = x, y = density)) +
geom_line(color = "#003366", size = 1.2) +  # Tegn tæthedskurven
labs(
x = bquote(chi^2),
y = "Tæthed"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16),  # Centrér titlen
axis.title = element_text(size = 14)
)
names(df)
names(data)
df <- readRDS("Data/GL_perspektiver.rds")
---
format:
revealjs:
theme: css_etc/custom-theme-ilisimatusarfik.css
df <- readRDS("Data/GL_perspektiver.rds")
names(df)
tabyl(df$e5)
tabyl(df$e4)
tabyl(df$e4, na.rm=T)
df <- df[df$e4 != "", ]
tabyl(df$e4)
df <- readRDS("Data/GL_perspektiver.rds")
df <- df[df$e4 != "", ]
tabyl(df$e4)
observeret <- c(10, 61, 29, 538)
forventet_andele <- c(0.05, 0.10, 0.05, 0.80)  # Din opfundne fordeling
total <- sum(observed)
forventet <- forventet_andele * total
total <- sum(observeret)
forventet <- forventet_andele * total
chi_test <- chisq.test(x = observeret, p = forventet_andele)
# Print resultatet
print(chi_test)
chi_test <- chisq.test(x = observeret, p = forventet)
chi_test
chi_test
forventet_andele <- c(0.02, 0.8, 0.05, 0.85)  # Din opfundne fordeling
chi_test <- chisq.test(x = observeret, p = forventet_andele)
forventet_andele <- c(0.02, 0.8, 0.05, 0.85)  # Din opfundne fordeling
chi_test <- chisq.test(x = observeret, p = forventet_andele)
forventet_andele <- c(0.02, 0.8, 0.05, 0.85)
chi_test <- chisq.test(x = observeret, p = forventet_andele)
forventet_andele <- forventet_andele / sum(forventet_andele)
# Print resultatet
print(forventet_andele)
tet_andele <- c(0.05, 0.10, 0.05, 0.80)  # Din opfundne fordeling
chi_te
forventet_andele <- c(0.05, 0.10, 0.05, 0.80)  # Din opfundne fordeling
chi_test <- chisq.test(x = observeret, p = forventet_andele)
# Print resultatet
print(chi_test)
df <- readRDS("Data/GL_perspektiver.rds")
df <- df[df$e4 != "", ]
tabyl(df$e4)
df <- readRDS("Data/GL_perspektiver.rds")
df <- df[df$e4 != "", ]
tabyl(df$e4)
forventet_andele <- c(0.01567398, 0.09561129, 0.04545455, 0.84326019) # Din opfundne fordeling
chi_test <- chisq.test(x = observeret, p = forventet_andele)
# Print resultatet
print(chi_test)
# Saml resultaterne i en tabel
result_table <- data.frame(
Metric = c("Chi-squared", "Degrees of Freedom", "p-value"),
Value = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
)
# Vis tabellen
print(result_table)
chi_test <- chisq.test(x = observeret, p = forventet_andele)
# Print resultatet
print(chi_test)
# Saml resultaterne i en tabel
result_table <- data.frame(
Metric = c("Chi-squared", "Degrees of Freedom", "p-value"),
Value = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
)
print(result_table)
forventet_andele <- c(0.05, 0.10, 0.05, 0.80)  # Din opfundne fordeling
chi_test <- chisq.test(x = observeret, p = forventet_andele)
# Print resultatet
print(chi_test)
# Saml resultaterne i en tabel
result_table <- data.frame(
Metric = c("Chi-squared", "Degrees of Freedom", "p-value"),
Value = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
)
print(result_table)
# Saml resultaterne i en tabel
result_table <- data.frame(
Metric = c("Chi-squared", "Degrees of Freedom", "p-value"),
Value = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
)
print(result_table)
write.csv(result_table, "chi_test_resultater.csv", row.names = FALSE)
# Saml resultaterne i en tabel
chi_table <- data.frame(
Metric = c("Chi-squared", "Degrees of Freedom", "p-value"),
Value = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
)
print(chi_table)
# Saml resultaterne i en tabel
chi_table <- data.frame(
Parameter = c("Chi-squared", "Degrees of Freedom", "p-value"),
Værdi = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
)
print(chi_table)
library(writexl)
write_xlsx(list("Chi test" = chi_table), "Chi_tabel.xlsx")
chisq.test(summary(df$e4))
class(df$e4)
chisq.test(head(summary(df$e4)))
chisq.test(head(summary(df$e4)))
tabyl(df$e4)
chisq.test(summary(df$e4))
chisq.test(table(df$e4))
mit_foerste_objekt <- "Hello world!"
mit_foerste_objekt
mit_tal <- 2
mit_tal
mit_tal + 2
resultat <- mit_tal + 2
resultat
getwd()
df <- readRDS("firma_data.rds")
names(df)
df <- data.frame(
køn = c("Mand", "Kvinde", "Mand", "Kvinde"),
tid = c(2020, 2020, 2021, 2021),
"Befolkningen 1. januar" = c(2750000, 2850000, 2780000, 2870000)
)
names(df)
library(janitor)
df <- clean_names(df)
names(df)
library(tidyverse)
df <- df %>% rename(koen = kon)
names(df)
df <- readRDS("Undervisningsdokumenter/E24/slides/data/ESS.rds")
library(tidyverse)
df <- df %>% select(koen, alder, udd, net_indkomst)
names(df)
df <- df %>% mutate(alder2 = alder^2)
df <- df %>%
mutate(myndig = if_else(alder >= 18,
"Myndig", # Kategori vis den binære betingelse er sand.
"Ikke myndig")) # Kategori hvis den binære betingelse ikke er sand.
df <- df %>%
mutate(alder_kategori = case_when(
between(alder, 15, 35) ~ "15-35 år",
between(alder, 36, 55) ~ "36-55år ",
between(alder, 56, 75) ~ "56-75 år",
alder > 75 ~ "75 +"
))
df <- df %>% mutate(gender = fct_recode(koen, "Male" = "Mand", "Female" = "Kvinde"))
ny_df <- df %>% select(koen, net_indkomst)
kvinde_df <- df %>% filter(koen=="Kvinde")
mtcars
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl)) +  # Omform cyl til en kategorisk variabel
geom_bar(fill = "#003366") +
labs(
title = "Antal biler pr. antal cylindere",
x = "Antal cylindre",
y = "Antal biler"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = mpg) +
geom_histogram(fill = "#003366") +
labs(
title = "Histogram af brændstoføkonomi",
x = "Miles per gallon (mpg)",
y = "Antal biler"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = "", y = mpg) +  # "" for at undgå en x-akse kategori, og y for at angive mpg
geom_boxplot(fill = "#003366", color = "black") +  # Ændring af farver
labs(
title = "Boksplot af brændstoføkonomi",
x = "",  # Tomt for at undgå en x-akse etiket
y = "Miles per gallon (mpg)"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), fill = factor(gear)) +
geom_bar(position = "dodge") +
labs(
title = "Fordeling af biler pr. cylinder og gear",
x = "Antal cylindre",
y = "Antal biler",
fill = "Antal gear"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = factor(gear)) +
geom_jitter(width = 0.2, height = 0.2) +
labs(
title = "Spredning af biler mellem cylinder og gear",
x = "Antal cylindre",
y = "Antal gear"
)
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = mpg) +
geom_boxplot() +
labs(
title = "Brændstoføkonomi pr. cylinder",
x = "Antal cylindre",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
library(janitor)
tabyl(df, udd)
library(DescTools)
Mode(df$udd, na.rm = TRUE)
Mean(df$alder, na.rm = T)
Median(df$alder, na.rm=T)
quantile(df$alder, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
summary(df$alder)
Var(df$alder, na.rm = TRUE)
sd(df$alder, na.rm = TRUE)
mean(df$alder)
t.test(df$alder, mu = 42.8)
# Opret en data frame med de ønskede metrics i rækker
resultat_df <- data.frame(
Metric = c("Gennemsnit",                  # Gennemsnittet af prøven
"Test-statistik",              # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),             # Frihedsgrader (df)
Value = c(
round(ttest_resultat$estimate, 3),        # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
)
# Indlæs nødvendige pakker
library(broom)
library(dplyr)
# Kør testen og gem resultaterne i et objekt
ttest_resultat <- t.test(df$alder, mu = 42.8)
# Opret en data frame med de ønskede metrics i rækker
resultat_df <- data.frame(
Metric = c("Gennemsnit",                  # Gennemsnittet af prøven
"Test-statistik",              # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),             # Frihedsgrader (df)
Value = c(
round(ttest_resultat$estimate, 3),        # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
)
# Udskriv tabellen i konsollen
print(resultat_df)
# Eksporter tabellen til en CSV-fil
write.csv(resultat_df, "t_test_resultat.csv", row.names = FALSE)
t.test(df$alder)
names(df)
tabyl(df$udd)
(chi_test <- chisq.test(x = observeret, p = forventet_andele))
observeret <- c(3087, 4501, 3934, 2148)
forventet_andele <- c(0.15, 0.30, 0.30, 0.25)  # Din forventede fordeling
(chi_test <- chisq.test(x = observeret, p = forventet_andele))
chi_test <- chisq.test(x = observeret, p = forventet_andele)
(chi_table <- data.frame(
Parameter = c("Chi-squared", "Degrees of Freedom", "p-value"),
Værdi = c(round(chi_test$statistic, 3),  # Chi-squared værdi
chi_test$parameter,           # Frihedsgrader
signif(chi_test$p.value, 3))  # p-værdi (signifikant til 3 decimaler)
))
(chi_tabel <- data.frame(
Parameter = c("Chi-squared", "Frihedsgrader", "p-værdi"),
Værdi = c(formatC(chi_test$statistic, format = "f", digits = 3),  # Chi-squared værdi
chi_test$parameter,                                     # Frihedsgrader
formatC(chi_test$p.value, format = "f", digits = 3))    # p-værdi
)
)
(chi_tabel <- data.frame(
Parameter = c("Chi-squared", "Frihedsgrader", "p-værdi"),
Værdi = c(formatC(chi_test$statistic, format = "f", digits = 3),  # Chi-squared værdi
chi_test$parameter,                                     # Frihedsgrader
formatC(chi_test$p.value, format = "f", digits = 3))    # p-værdi
))
0.3*(1-0.3)
sqrt(0.21/10)
0.3-1.96
-1.66*0.1449138
sqrt(0.021)
1.96*0.1449
