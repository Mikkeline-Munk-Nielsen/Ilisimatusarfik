geom_bar(aes(y = cumsum(..count..) / sum(..count..) * 100),
stat = "count", fill = "#003366") +
labs(
x = "År",
y = "Kummulativ andel"
)
# Sørg for at aldersgruppen er en faktor med de rigtige niveauer
df$V42_Alder_Grupperet <- factor(df$V42_Alder_Grupperet,
levels = c(1, 2, 3, 4, 5, 6, 7, NA),
labels = c("18 - 19 år", "20 - 29 år", "30 - 39 år", "40 - 49 år",
"50 - 59 år", "60 - 69 år", "Over 70 år", "Uoplyst"))
# Sørg for, at aldersgruppen er en faktor med de rigtige niveauer (uden NA som niveau)
df$V42_Alder_Grupperet <- factor(df$V42_Alder_Grupperet,
levels = c(1, 2, 3, 4, 5, 6, 7),
labels = c("18 - 19 år", "20 - 29 år", "30 - 39 år", "40 - 49 år",
"50 - 59 år", "60 - 69 år", "Over 70 år"))
# Opret barplot med de rigtige aldersgrupper på x-aksen
ggplot(df, aes(x = V42_Alder_Grupperet)) +
geom_bar(aes(y = cumsum(..count..) / sum(..count..) * 100),
stat = "count", fill = "#003366") +
labs(
x = "Aldersgruppe",
y = "Kumulativ andel"
) +
scale_x_discrete(drop = FALSE)  # Sikrer, at alle kategorier inkl. "Uoplyst" vises
# Sørg for, at aldersgruppen er en faktor med de rigtige niveauer (uden NA som niveau)
df$V42_Alder_Grupperet <- factor(df$V42_Alder_Grupperet,
levels = c(1, 2, 3, 4, 5, 6, 7),
labels = c("18 - 19 år", "20 - 29 år", "30 - 39 år", "40 - 49 år",
"50 - 59 år", "60 - 69 år", "Over 70 år"))
# Opret barplot med de rigtige aldersgrupper på x-aksen
ggplot(df, aes(x = V42_Alder_Grupperet)) +
geom_bar(aes(y = cumsum(..count..) / sum(..count..) * 100),
stat = "count", fill = "#003366") +
labs(
x = "Aldersgruppe",
y = "Kumulativ andel"
) +
scale_x_discrete(drop = FALSE)  # Sikrer, at alle kategorier inkl. "Uoplyst" vises
---
format:
revealjs:
theme: css_etc/custom-theme-ilisimatusarfik.css
data <- c(3, 5, 7, 8, 10)
mean_value <- mean(data)
# Plot data
plot(data, type = "h", lwd = 2, col = "blue", main = "Afstand fra gennemsnittet")
# Dataserie
data <- c(3, 5, 7, 8, 10, 12, 15, 18, 20, 25)
mean_value <- mean(data)
# Dataserie
data <- c(3, 5, 7, 8, 10, 12, 15, 18, 20, 25)
mean_value <- mean(data)
# Plot af observationer (scatterplot)
plot(data, rep(1, length(data)), pch = 19, xlim = c(min(data) - 5, max(data) + 5), ylim = c(0.5, 1.5),
xlab = "Observationer", ylab = "", main = "Observationer og deres afstand til gennemsnittet",
axes = FALSE)
# Tilføj gennemsnittet som en rød linje
abline(v = mean_value, col = "red", lty = 2, lwd = 2)
# Tilføj pile for hver observation, der peger på gennemsnittet
arrows(x0 = data, y0 = rep(1, length(data)), x1 = rep(mean_value, length(data)), y1 = rep(1, length(data)),
col = "blue", length = 0.1, angle = 20)
# Tilføj tekst til gennemsnittet
text(mean_value, 1.1, paste("Gennemsnit =", round(mean_value, 2)), col = "red", pos = 3)
# Fjern y-aksen og tilføj x-aksen
axis(1)
# Dataserie
data <- c(3, 5, 7, 8, 10, 12, 15, 18, 20, 25)
mean_value <- mean(data)
y_vals <- seq(1, length(data))  # y-værdierne varierer for at vise forskelle
# Plot af observationer (scatterplot)
plot(data, y_vals, pch = 19, xlim = c(min(data) - 5, max(data) + 5), ylim = c(0.5, length(data) + 0.5),
xlab = "Observationer", ylab = "Y-værdi", main = "Observationer og deres afstand til gennemsnittet",
axes = TRUE)
# Tilføj gennemsnittet som en rød linje
abline(v = mean_value, col = "red", lty = 2, lwd = 2)
# Tilføj pile for hver observation, der peger på gennemsnittet
arrows(x0 = data, y0 = y_vals, x1 = rep(mean_value, length(data)), y1 = y_vals,
col = "blue", length = 0.1, angle = 20)
# Tilføj tekst til gennemsnittet
text(mean_value, length(data) + 0.5, paste("Gennemsnit =", round(mean_value, 2)), col = "red", pos = 3)
# Tilføj x- og y-akse
axis(1)
axis(2)
# Dataserie
data <- c(3, 5, 7, 8, 10, 12, 15, 18, 20, 25)
mean_value <- mean(data)
y_vals <- seq(1, length(data))  # y-værdierne varierer for at vise forskelle
# Plot af observationer (scatterplot)
plot(data, y_vals, pch = 19, xlim = c(min(data) - 5, max(data) + 5), ylim = c(0.5, length(data) + 0.5),
xlab = "Observationer", ylab = "Y-værdi", main = "Observationer og deres afstand til gennemsnittet",
axes = TRUE)
# Tilføj gennemsnittet som en rød linje
abline(v = mean_value, col = "red", lty = 2, lwd = 2)
# Tilføj pile for hver observation, der peger på gennemsnittet
arrows(x0 = data, y0 = y_vals, x1 = rep(mean_value, length(data)), y1 = y_vals,
col = "blue", length = 0.1, angle = 20)
# Tilføj tekst til gennemsnittet
text(mean_value, length(data) + 0.5, paste("Gennemsnit =", round(mean_value, 2)), col = "red", pos = 3)
# Tilføj x- og y-akse
axis(1)
axis(2)
# Load necessary libraries
library(ggplot2)
library(plotly)
install.packages("plotly")
# Load necessary libraries
library(ggplot2)
library(plotly)
# Simulate two datasets: one with high variance and one with low variance
set.seed(123)
low_variance_data <- data.frame(x = 1:100, y = rnorm(100, mean = 50, sd = 2))
high_variance_data <- data.frame(x = 1:100, y = rnorm(100, mean = 50, sd = 15))
# Create ggplot
p <- ggplot() +
geom_point(data = low_variance_data, aes(x = x, y = y), color = "blue", size = 2) +
geom_point(data = high_variance_data, aes(x = x, y = y), color = "red", size = 2) +
labs(title = "High vs Low Variance in Data",
x = "Index",
y = "Values") +
theme_minimal()
# Convert ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
install.packages("shiny")
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Variance in Dataset"),
# Sidebar layout with input slider
sidebarLayout(
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1,
max = 50,
value = 2)
),
# Show the plot
mainPanel(
plotlyOutput("variancePlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$variancePlot <- renderPlotly({
set.seed(123)
# Generate data with adjustable variance
data <- data.frame(
x = 1:100,
y = rnorm(100, mean = 50, sd = input$variance)
)
# Create a ggplot
p <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +
labs(title = paste("Variance:", input$variance),
x = "Index",
y = "Values") +
theme_minimal()
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarLayout(
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 40000, sd = input$variance)  # Mean income is fixed at 40,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(bins = 30, fill = "blue", color = "white", alpha = 0.7) +
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Frequency") +
theme_minimal()
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarLayout(
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 40000, sd = input$variance)  # Mean income fixed at 40,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(bins = 30, fill = "blue", color = "white", alpha = 0.7) +
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Frequency") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
geom_vline(xintercept = 40000, color = "red", linetype = "dashed", size = 1) +  # Red line for mean
theme_minimal()
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 40000, sd = input$variance)  # Mean income fixed at 40,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", color = "white", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 40000, sd = input$variance), color = "red", size = 1) +  # Add normal distribution curve
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Density") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 500000, sd = input$variance)  # Mean income now set to 500,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", color = "white", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 500000, sd = input$variance), color = "red", size = 1) +  # Red normal distribution curve with mean 500,000 DKK
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Density") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 500000, sd = input$variance)  # Mean income now set to 500,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(aes(y = ..density..), binwidth = 10000, fill = "blue", color = "white", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 500000, sd = input$variance), color = "red", size = 1) +  # Red normal distribution curve with mean 500,000 DKK
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Density") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
