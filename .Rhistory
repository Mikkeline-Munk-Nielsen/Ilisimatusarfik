text(mean_value, length(data) + 0.5, paste("Gennemsnit =", round(mean_value, 2)), col = "red", pos = 3)
# Tilføj x- og y-akse
axis(1)
axis(2)
# Dataserie
data <- c(3, 5, 7, 8, 10, 12, 15, 18, 20, 25)
mean_value <- mean(data)
y_vals <- seq(1, length(data))  # y-værdierne varierer for at vise forskelle
# Plot af observationer (scatterplot)
plot(data, y_vals, pch = 19, xlim = c(min(data) - 5, max(data) + 5), ylim = c(0.5, length(data) + 0.5),
xlab = "Observationer", ylab = "Y-værdi", main = "Observationer og deres afstand til gennemsnittet",
axes = TRUE)
# Tilføj gennemsnittet som en rød linje
abline(v = mean_value, col = "red", lty = 2, lwd = 2)
# Tilføj pile for hver observation, der peger på gennemsnittet
arrows(x0 = data, y0 = y_vals, x1 = rep(mean_value, length(data)), y1 = y_vals,
col = "blue", length = 0.1, angle = 20)
# Tilføj tekst til gennemsnittet
text(mean_value, length(data) + 0.5, paste("Gennemsnit =", round(mean_value, 2)), col = "red", pos = 3)
# Tilføj x- og y-akse
axis(1)
axis(2)
# Load necessary libraries
library(ggplot2)
library(plotly)
install.packages("plotly")
# Load necessary libraries
library(ggplot2)
library(plotly)
# Simulate two datasets: one with high variance and one with low variance
set.seed(123)
low_variance_data <- data.frame(x = 1:100, y = rnorm(100, mean = 50, sd = 2))
high_variance_data <- data.frame(x = 1:100, y = rnorm(100, mean = 50, sd = 15))
# Create ggplot
p <- ggplot() +
geom_point(data = low_variance_data, aes(x = x, y = y), color = "blue", size = 2) +
geom_point(data = high_variance_data, aes(x = x, y = y), color = "red", size = 2) +
labs(title = "High vs Low Variance in Data",
x = "Index",
y = "Values") +
theme_minimal()
# Convert ggplot to an interactive plotly plot
interactive_plot <- ggplotly(p)
# Display the interactive plot
interactive_plot
install.packages("shiny")
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Variance in Dataset"),
# Sidebar layout with input slider
sidebarLayout(
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1,
max = 50,
value = 2)
),
# Show the plot
mainPanel(
plotlyOutput("variancePlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$variancePlot <- renderPlotly({
set.seed(123)
# Generate data with adjustable variance
data <- data.frame(
x = 1:100,
y = rnorm(100, mean = 50, sd = input$variance)
)
# Create a ggplot
p <- ggplot(data, aes(x = x, y = y)) +
geom_point(color = "blue", size = 2) +
labs(title = paste("Variance:", input$variance),
x = "Index",
y = "Values") +
theme_minimal()
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarLayout(
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 40000, sd = input$variance)  # Mean income is fixed at 40,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(bins = 30, fill = "blue", color = "white", alpha = 0.7) +
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Frequency") +
theme_minimal()
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarLayout(
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 40000, sd = input$variance)  # Mean income fixed at 40,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(bins = 30, fill = "blue", color = "white", alpha = 0.7) +
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Frequency") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
geom_vline(xintercept = 40000, color = "red", linetype = "dashed", size = 1) +  # Red line for mean
theme_minimal()
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 40000, sd = input$variance)  # Mean income fixed at 40,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", color = "white", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 40000, sd = input$variance), color = "red", size = 1) +  # Add normal distribution curve
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Density") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 500000, sd = input$variance)  # Mean income now set to 500,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(aes(y = ..density..), bins = 30, fill = "blue", color = "white", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 500000, sd = input$variance), color = "red", size = 1) +  # Red normal distribution curve with mean 500,000 DKK
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Density") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
)
# Load necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for the app within the Quarto slide
ui <- fluidPage(
# Title
titlePanel("Adjust Income Variance"),
# Sidebar layout with input slider
sidebarPanel(
sliderInput("variance",
"Variance:",
min = 1000,
max = 50000,
value = 5000,
step = 1000)
),
# Show the plot
mainPanel(
plotlyOutput("incomePlot")
)
)
# Define server logic
server <- function(input, output) {
output$incomePlot <- renderPlotly({
set.seed(123)
# Generate income data with adjustable variance
income_data <- data.frame(
income = rnorm(1000, mean = 500000, sd = input$variance)  # Mean income now set to 500,000 DKK
)
# Create a ggplot to show income distribution
p <- ggplot(income_data, aes(x = income)) +
geom_histogram(aes(y = ..density..), binwidth = 10000, fill = "blue", color = "white", alpha = 0.7) +
stat_function(fun = dnorm, args = list(mean = 500000, sd = input$variance), color = "red", size = 1) +  # Red normal distribution curve with mean 500,000 DKK
labs(title = paste("Income Distribution (Variance:", input$variance, "DKK)"),
x = "Income (DKK)",
y = "Density") +
xlim(0, 1000000) +  # Fix x-axis from 0 to 1,000,000 DKK
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert to plotly for interactivity
ggplotly(p)
})
}
# Run the application
shinyApp(ui = ui, server = server)
(df <- readRDS("firma_data.rds"))
library(janitor)
tabyl(df, industri)
library(ggplot2)
ggplot(df, aes(x = industri)) +
geom_bar(fill = "#003366", na.rm = FALSE) +
labs(
x = "Industri",
y = "Frekvens") +
theme(
text = element_text(size = 14))  # Gør skriften større
library(janitor)
tabyl(df, industri)
library(ggplot2)
ggplot(df, aes(x = industri)) +
geom_bar(aes(y = (..count..) / sum(..count..) * 100),
fill = "#003366", na.rm = FALSE) +
labs(
x = "Industri",
y = "Procent") +
theme(
text = element_text(size = 14))  # Gør skriften større
library(dplyr)
library(ggplot2)
# Beregn procenterne manuelt
df_pie <- df %>%
group_by(industri) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Opret cirkeldiagrammet med procenter og hvid tekst
ggplot(df_pie, aes(x = "", y = percentage, fill = factor(industri))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(round(percentage, 1), "%")),
position = position_stack(vjust = 0.5),
color = "white") +  # Gør teksten hvid
labs(x = NULL, y = NULL, fill = "Industri") +
theme_void() +  # Fjerner akse-linjer og labels
scale_fill_manual(values = c("#003366", "#6699CC", "#336699", "#99CCFF", "#0066CC"))  # Blå farver
library(ggplot2)
library(dplyr)
df <- df %>%
mutate(ansatte_gruppe = case_when(
ansatte <= 1000 ~ "0 - 1k",
ansatte > 1000 & ansatte <= 2000 ~ "1k - 2k",
ansatte > 2000 & ansatte <= 3000 ~ "2k - 3k",
ansatte > 3000 & ansatte <= 4000 ~ "3k - 4k",
ansatte > 4000 ~ "4k+"
))
# Opret barplot med de rigtige aldersgrupper på x-aksen
ggplot(df, aes(x = ansatte_gruppe)) +
geom_bar(aes(y = cumsum(..count..) / sum(..count..) * 100),
stat = "count", fill = "#003366") +
labs(
x = "Ansatte",
y = "Kumulativ andel") +
scale_x_discrete(drop = FALSE) + # Vis alle kategorier
theme(
text = element_text(size = 14))  # Gør skriften større
library(DescTools)
(mode <- Mode(df$industri, na.rm = TRUE))
Mean(df$omsaetning, na.rm = T)
Median(df$omsaetning, na.rm=T)
quantile(df$omsaetning, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
library(ggplot2)
ggplot(df, aes(x = omsaetning)) + # Variabel = omsaetning
geom_boxplot() +  # Opretter et boxplot
theme_minimal() + # Tema
scale_x_continuous(breaks = # Definerer x-aksen
seq(min(50000),
max(1000000),
by = 100000)) +
labs(
x = "Omsætning (DKK)") + # Tilføjer en brugerdefineret titel til x-aksen
theme(
axis.text.y = element_blank(),  # Fjerner værdierne på y-aksen
axis.ticks.y = element_blank(),  # Fjerner stregmarkeringer på y-aksen
text = element_text(size = 14)) +  # Gør skriften større
coord_fixed(ratio = 300000)  # Justér på højden af boksplottet
summary(df$omsaetning)
