geom_line(color = "blue", size = 1) +
labs(
title = "Sammenhæng mellem stikprøvestørrelse og usikkerhed",
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal()
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_discrete(breaks = c(50, 100, 250, 500, 750, 1000, 1500, 2000, 5000, 10000)) +  # Log scale with more ticks
labs(
title = "Sammenhæng mellem stikprøvestørrelse og usikkerhed",
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal()
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = c(50, 100, 250, 500, 750, 1000, 1500, 2000, 5000, 10000)) +  # Log scale with more ticks
labs(
title = "Sammenhæng mellem stikprøvestørrelse og usikkerhed",
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal()
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 500)) +  # Adds ticks every 500 units
labs(
title = "Sammenhæng mellem stikprøvestørrelse og usikkerhed",
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal()
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +  # Adds ticks every 500 units
labs(
title = "Sammenhæng mellem stikprøvestørrelse og usikkerhed",
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal()
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +  # Adds ticks every 500 units
scale_y_continuous(breaks = seq(0, 15, by = 1)) +  # Adds ticks every 500 units
labs(
title = "Sammenhæng mellem stikprøvestørrelse og usikkerhed",
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal()
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +  # Adds ticks every 500 units
scale_y_continuous(breaks = seq(0, 15, by = 1)) +  # Adds ticks every 500 units
labs(
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal()
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +  # Adds ticks every 500 units
scale_y_continuous(breaks = seq(0, 15, by = 1)) +  # Adds ticks every 500 units
labs(
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 16),  # Increase axis titles font size
axis.text = element_text(size = 14)    # Increase axis labels font size
)
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +  # Adds ticks every 500 units
scale_y_continuous(breaks = seq(0, 15, by = 1)) +  # Adds ticks every 500 units
labs(
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),  # Increase axis titles font size
axis.text = element_text(size = 12)    # Increase axis labels font size
)
# Load ggplot2 for plotting
library(ggplot2)
# Data from the table (sample sizes and uncertainty for 50/50 distribution)
data <- data.frame(
N = c(50, 100, 250, 500, 750, 1000, 1500, 2000, 5000, 10000),
Uncertainty = c(13.9, 9.8, 6.2, 4.4, 3.6, 3.1, 2.5, 2.2, 1.4, 1.0)
)
# Create line graph
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +  # Adds ticks every 500 units
scale_y_continuous(breaks = seq(0, 15, by = 1)) +  # Adds ticks every 500 units
labs(
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),  # Increase axis titles font size
axis.text = element_text(size = 12)    # Increase axis labels font size
)
# Data from the table (sample sizes and uncertainty for 1/99 distribution)
data <- data.frame(
N = c(50, 100, 250, 500, 750, 1000, 1500, 2000, 5000, 10000),
Uncertainty = c(2.8, 2.0, 1.2, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2)
)
# Create line graph for 1/99 distribution
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +
scale_y_continuous(breaks = seq(0, 3, by = 0.5)) +
labs(
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)",
title = "Usikkerhed for 1/99 Fordeling baseret på Stikprøvestørrelse"
) +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Data from the table (sample sizes and uncertainty for 1/99 distribution)
data <- data.frame(
N = c(50, 100, 250, 500, 750, 1000, 1500, 2000, 5000, 10000),
Uncertainty = c(2.8, 2.0, 1.2, 0.9, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2)
)
# Create line graph for 1/99 distribution
ggplot(data, aes(x = N, y = Uncertainty)) +
geom_line(color = "blue", size = 1) +
scale_x_continuous(breaks = seq(0, 10000, by = 1000)) +
scale_y_continuous(breaks = seq(0, 3, by = 0.5)) +
labs(
x = "Stikprøvestørrelse (N)",
y = "Usikkerhed (%)") +
theme_minimal() +
theme(
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Load ggplot2 and grid (for arrows)
library(ggplot2)
library(grid)
# Parameters for the standard normal distribution
mean <- 0       # Mean (mu)
sd <- 1         # Standard deviation (sigma)
# Create a data frame with x values and their density for the normal distribution
x <- seq(-4, 4, length.out = 100)  # x-range
y <- dnorm(x, mean, sd)            # Density of the normal distribution
df <- data.frame(x, y)
# Plot the standard normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(y = "Tæthed", x="") +
theme_minimal() +
# Add text for the mean and standard deviations, slightly shifted to the sides
annotate("text", x = mean, y = max(y) + 0.02, label = expression(mu), size = 5, color = "black") +
annotate("text", x = -1.3, y = dnorm(-1, mean, sd) + 0.02, label = expression(-sigma), size = 4, color = "black") +
annotate("text", x = 1.3, y = dnorm(1, mean, sd) + 0.02, label = expression(sigma), size = 4, color = "black") +
# Add a horizontal arrow between -sigma and +sigma, placed near the sd markers
geom_segment(aes(x = -0.9, xend = .9, y = dnorm(1, mean, sd) + 0.01, yend = dnorm(1, mean, sd) + 0.01),
arrow = arrow(ends = "both", type = "closed", length = unit(0.2, "cm")), color = "black") +
annotate("text", x = 0, y = dnorm(1, mean, sd) + 0.03, label = "± σ", size = 4, color = "black")
# Plot normalfordelingen
(normalfordeling <- ggplot(df, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(y = "Sandsynlighedstæthed", x="Data") +
theme_minimal() +
theme(
text = element_text(size = 16),            # General text size
axis.title = element_text(size = 18),      # Axis title size
axis.text = element_text(size = 14),       # Axis labels size
))
# Plot the standard normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(y = "Tæthed", x="") +
theme_minimal() +
# Add text for the mean and standard deviations, slightly shifted to the sides
annotate("text", x = mean, y = max(y) + 0.02, label = expression(mu), size = 5, color = "black") +
annotate("text", x = -1.3, y = dnorm(-1, mean, sd) + 0.02, label = expression(-sigma), size = 4, color = "black") +
annotate("text", x = 1.3, y = dnorm(1, mean, sd) + 0.02, label = expression(sigma), size = 4, color = "black") +
# Add a horizontal arrow between -sigma and +sigma, placed near the sd markers
geom_segment(aes(x = -0.9, xend = .9, y = dnorm(1, mean, sd) + 0.01, yend = dnorm(1, mean, sd) + 0.01),
arrow = arrow(ends = "both", type = "closed", length = unit(0.2, "cm")), color = "black") +
annotate("text", x = 0, y = dnorm(1, mean, sd) + 0.03, label = "± σ", size = 4, color = "black")+
theme(
text = element_text(size = 16),            # General text size
axis.title = element_text(size = 18),      # Axis title size
axis.text = element_text(size = 14),       # Axis labels size
))
# Plot the standard normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "blue", size = 1) +
labs(y = "Tæthed", x="") +
theme_minimal() +
# Add text for the mean and standard deviations, slightly shifted to the sides
annotate("text", x = mean, y = max(y) + 0.02, label = expression(mu), size = 5, color = "black") +
annotate("text", x = -1.3, y = dnorm(-1, mean, sd) + 0.02, label = expression(-sigma), size = 4, color = "black") +
annotate("text", x = 1.3, y = dnorm(1, mean, sd) + 0.02, label = expression(sigma), size = 4, color = "black") +
# Add a horizontal arrow between -sigma and +sigma, placed near the sd markers
geom_segment(aes(x = -0.9, xend = .9, y = dnorm(1, mean, sd) + 0.01, yend = dnorm(1, mean, sd) + 0.01),
arrow = arrow(ends = "both", type = "closed", length = unit(0.2, "cm")), color = "black") +
annotate("text", x = 0, y = dnorm(1, mean, sd) + 0.03, label = "± σ", size = 4, color = "black")+
theme(
text = element_text(size = 16),            # General text size
axis.title = element_text(size = 18),      # Axis title size
axis.text = element_text(size = 14)      # Axis labels size
)
df <- readRDS("Data/GL_perspektiver.rds")
df <- df[df$e4 != "", ]
tabyl(df$e4)
library(janitor)
df <- readRDS("Data/GL_perspektiver.rds")
df <- df[df$e4 != "", ]
library(janitor)
tabyl(df$e4)
---
title: "Aflevering 2: forslag til besvarelse"
names(df)
View(df)
tabyl(df$17a)
tabyl(df$"17a")
tabyl(df$l7afoodhunt)
t.test(fd$l7afoodhunt)
t.test(df$l7afoodhunt)
names(df)
summary(df$l12income)
50/57
tabyl(df$j16greenlandicjudicialsystem)
observeret <- c(33, 72, 183, 148, 86)
forventet_andele <- c(0.2, 0.2, 0.2, 0.2)  # Din forventede fordeling
_test <- chisq.test(x = observeret, p = forventet_andele)
chi_test <- chisq.test(x = observeret, p = forventet_andele)
forventet_andele <- c(0.2, 0.2, 0.2, 0.2, 0.2)  # Din forventede fordeling
chi_test <- chisq.test(x = observeret, p = forventet_andele)
# Print resultatet
print(chi_test)
50/57
ttest_resultat <- t.test(df$alder, mu = 42.8)
mit_foerste_objekt <- "Hello world!"
mit_foerste_objekt
mit_tal <- 2
mit_tal
mit_tal + 2
resultat <- mit_tal + 2
resultat
getwd()
df <- readRDS("firma_data.rds")
names(df)
df <- data.frame(
køn = c("Mand", "Kvinde", "Mand", "Kvinde"),
tid = c(2020, 2020, 2021, 2021),
"Befolkningen 1. januar" = c(2750000, 2850000, 2780000, 2870000)
)
names(df)
library(janitor)
df <- clean_names(df)
names(df)
library(tidyverse)
df <- df %>% rename(koen = kon)
names(df)
df <- readRDS("Undervisningsdokumenter/E24/slides/data/ESS.rds")
library(tidyverse)
df <- df %>% select(koen, alder, udd, net_indkomst)
names(df)
df <- df %>% mutate(alder2 = alder^2)
df <- df %>%
mutate(myndig = if_else(alder >= 18,
"Myndig", # Kategori vis den binære betingelse er sand.
"Ikke myndig")) # Kategori hvis den binære betingelse ikke er sand.
df <- df %>%
mutate(alder_kategori = case_when(
between(alder, 15, 35) ~ "15-35 år",
between(alder, 36, 55) ~ "36-55år ",
between(alder, 56, 75) ~ "56-75 år",
alder > 75 ~ "75 +"
))
df <- df %>% mutate(gender = fct_recode(koen, "Male" = "Mand", "Female" = "Kvinde"))
ny_df <- df %>% select(koen, net_indkomst)
kvinde_df <- df %>% filter(koen=="Kvinde")
mtcars
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl)) +  # Omform cyl til en kategorisk variabel
geom_bar(fill = "#003366") +
labs(
title = "Antal biler pr. antal cylindere",
x = "Antal cylindre",
y = "Antal biler"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = mpg) +
geom_histogram(fill = "#003366") +
labs(
title = "Histogram af brændstoføkonomi",
x = "Miles per gallon (mpg)",
y = "Antal biler"
) +
theme_minimal()
ggplot(mtcars) +
aes(x = "", y = mpg) +  # "" for at undgå en x-akse kategori, og y for at angive mpg
geom_boxplot(fill = "#003366", color = "black") +  # Ændring af farver
labs(
title = "Boksplot af brændstoføkonomi",
x = "",  # Tomt for at undgå en x-akse etiket
y = "Miles per gallon (mpg)"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), fill = factor(gear)) +
geom_bar(position = "dodge") +
labs(
title = "Fordeling af biler pr. cylinder og gear",
x = "Antal cylindre",
y = "Antal biler",
fill = "Antal gear"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = factor(gear)) +
geom_jitter(width = 0.2, height = 0.2) +
labs(
title = "Spredning af biler mellem cylinder og gear",
x = "Antal cylindre",
y = "Antal gear"
)
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = mpg) +
geom_boxplot() +
labs(
title = "Brændstoføkonomi pr. cylinder",
x = "Antal cylindre",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon") +
theme_minimal()+
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
library(ggplot2)
ggplot(data = mtcars) +
aes(x = wt, y = mpg) +
geom_point(color="purple") +
labs(
title = "Relationship between Weight and Fuel Efficiency",
x = "Weight (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal() +
scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
theme(
plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks)
coord_flip() # Roterer akserne
library(janitor)
tabyl(df, udd)
library(DescTools)
Mode(df$udd, na.rm = TRUE)
Mean(df$alder, na.rm = T)
Median(df$alder, na.rm=T)
quantile(df$alder, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
summary(df$alder)
Var(df$alder, na.rm = TRUE)
sd(df$alder, na.rm = TRUE)
t.test(df$alder)
ttest_resultat <- t.test(df$alder, mu = 42.8)
# Opret en data frame med de ønskede metrics i rækker
resultat_df <- data.frame(
Metric = c("Gennemsnit",                  # Gennemsnittet af prøven
"Test-statistik",              # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),             # Frihedsgrader (df)
Value = c(
round(ttest_resultat$estimate, 3),        # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
)
# Udskriv tabellen i konsollen
print(resultat_df)
# Eksporter tabellen til en CSV-fil
write.csv(resultat_df, "t_test_resultat.csv", row.names = FALSE)
# Udskriv tabellen i konsollen
print(resultat_df)
# Opret en data frame med de ønskede metrics i rækker
resultat_df <- data.frame(
Parameter = c("Gennemsnit",                  # Gennemsnittet af prøven
"Test-statistik",              # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),             # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat$estimate, 3),        # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
)
# Udskriv tabellen i konsollen
print(resultat_df)
