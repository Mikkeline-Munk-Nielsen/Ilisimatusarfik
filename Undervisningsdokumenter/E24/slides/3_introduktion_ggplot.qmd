---
format: 
  revealjs:
    theme: css_etc/custom-theme-ilisimatusarfik.css
    slide-level: 0  # Disable automatic slide creation from headings
    incremental: false 
    logo: css_etc/ilisimatusarfik.png
    highlight: true
    highlight-style: github-dark
editor: visual
---

::: center
# Introduktion til ggplot

### Statistik E24 (15 ECTS)

### ved Mikkeline Munk Nielsen
:::

------------------------------------------------------------------------

# Hvad er ggplot2?


::::: two-column-layout
::: left-column
-   **ggplot2** er en datavisualiseringspakke i R.
-   Den er bygget på *grammar of graphics* og giver fleksibilitet til at skabe avancerede plots.
-   Det basale i ggplot2: *data*, *aes*, og *geometriske objekter (geoms)*.
:::

::: right-column
![](images/ggplot.png)
:::
:::::

------------------------------------------------------------------------

# De tre grundelementer i ggplot2

1.  **Data**: Data, du vil plotte.
2.  **Aesthetic mappings (aes)**: Kortlægning af variabler
3.  **Geometriske objekter (geom)**: plot-type, f.eks. søjlediagram, scatterplot, eller boksplot

```{r echo=T, eval=F}
library(ggplot2)

ggplot(data = <DATA>) +
  aes(x = <X-variabel>, y = <Y-variabel>) +
  geom_<GEOM>()
```

------------------------------------------------------------------------

# Syntaks i ggplot

-   ggplot2 er som at bygge med LEGO-klodser: Du tilføjer forskellige lag for at skabe det endelige plot.
-   Hvert lag bygger på det forrige og tilføjer nye visuelle elementer.
-   Basen er data, og du bygger videre med lag som akser, farver og geometriske former.

```{r echo=T, eval=F}
ggplot(data = <DATA>) +
  aes(x = <X-variabel>, y = <Y-variabel>) +
  geom_<GEOM>()
```

------------------------------------------------------------------------

# Eksempel på et simpelt plot

-   Data fra ***mtcars***-datasættet (built in datasæt på biler)

-   Kortlægger variablene **wt** (vægt) til x-aksen og **mpg** (miles per gallon) til y-aksen.

-   `geom_point()` tilføjer punkterne til plottet.

::: panel-tabset
### Scatterplot

```{r echo=F, fig.width=6, fig.height=3}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point()

```

### Kode

```{r echo=T, eval=F}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point()

```
:::

------------------------------------------------------------------------

# Ændring af plot-udseende

-   Man kan bruge funktionen `labs()` til at tilføje titel og asketitler

::: panel-tabset
### Scatterplot

```{r echo=F, fig.width=6, fig.height=3}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon"
  )

```

### Kode

```{r echo=T, eval=F}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon"
  )

```
:::

------------------------------------------------------------------------

# Ændring af plot-udseende

-   Man kan ændre dine plots visuelle udseende med `themes()`

-   Man kan f.eks. ændre baggrunde, akser, tekst, grids, osv., ved at bruge forskellige temaer.

-   ggplot2 kommer med flere indbyggede temaer, f.eks. `theme_minimal()`

::: panel-tabset
### Scatterplot

```{r echo=F, fig.width=6, fig.height=3}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon") +
  theme_minimal()

```

### Kode

```{r echo=T, eval=F}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon") +
  theme_minimal()

```
:::

------------------------------------------------------------------------

# Ændring af plot-udseende

Det er ofte nødvendigt at skrue på værdierne på akserne. Afhængigt af, hvilken akse man vil justere bruger man:

-   `scale_x_discrete()`: Bruges til diskrete (kategoriske) værdier på x-aksen

-   `scale_x_continuous()`: Bruges til kontinuære (numeriske) værdier på x-aksen

-   `scale_y_discrete()`: Bruges til diskrete værdier på y-aksen

-   `scale_y_continuous()`: Bruges til kontinuære værdier på y-aksen.

------------------------------------------------------------------------

# Ændring af plot-udseende

::: panel-tabset
### Scatterplot

```{r echo=F, fig.width=6, fig.height=3}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon") +
  theme_minimal()+
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5)) 
```

### Kode

```{r echo=T, eval=F}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon") +
  theme_minimal()+
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5)) 
```
:::

------------------------------------------------------------------------

# Ændring af plot-udseende

Man kan også ændre farver med `color()`

::: panel-tabset
### Scatterplot

```{r echo=F, fig.width=6, fig.height=3}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point(color="purple") +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon") +
  theme_minimal()+
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5)) 
```

### Kode

```{r echo=T, eval=F}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point(color="purple") +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon") +
  theme_minimal()+
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5)) 
```
:::

------------------------------------------------------------------------

# Ændring af plot-udseende

Man kan ændre tekst-størrelsen på plottets elementer med `theme()`:

```{r echo=T, eval=F}
  theme(
    plot.title = element_text(size = 16),          # Ændrer titelstørrelsen
    axis.title.x = element_text(size = 12),        # Ændrer størrelsen på x-aksetitlen
    axis.title.y = element_text(size = 12),        # Ændrer størrelsen på y-aksetitlen
    axis.text.x = element_text(size = 10),         # Ændrer størrelsen på x-akse tekst (ticks)
    axis.text.y = element_text(size = 10)          # Ændrer størrelsen på y-akse tekst (ticks)
  )
```

------------------------------------------------------------------------

# Ændring af plot-udseende

::: panel-tabset
### Scatterplot

```{r echo=F, fig.width=6, fig.height=3}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point(color="purple") +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal() +
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
  theme(
    plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
    axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
    axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
    axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
    axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)

```

### Kode

```{r echo=T, eval=F}
library(ggplot2)
ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point(color="purple") +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal() +
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
  theme(
    plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
    axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
    axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
    axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
    axis.text.y = element_text(size = 12))          # Ændrer størrelsen på y-akse tekst (ticks)
```
:::

------------------------------------------------------------------------

# Ændring af plot-udseende

Nogle gange kan det også være nyttigt at rotere sit plot med `coord_flip()`:

::: panel-tabset
### Scatterplot

```{r echo=F, fig.width=6, fig.height=3}
library(ggplot2)

ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point(color="purple") +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal() +
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
  theme(
    plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
    axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
    axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
    axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
    axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks) 
  coord_flip() # Roterer akserne

```

### Kode

```{r echo=T, eval=F}
library(ggplot2)
ggplot(data = mtcars) +
  aes(x = wt, y = mpg) +
  geom_point(color="purple") +
  labs(
    title = "Relationship between Weight and Fuel Efficiency",
    x = "Weight (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal() +
  scale_x_continuous(limits = c(1, 6), breaks = seq(1, 6, by = 1)) +
  scale_y_continuous(limits = c(0, 40), breaks = seq(0, 40, by = 5))+
  theme(
    plot.title = element_text(size = 18),          # Ændrer titelstørrelsen
    axis.title.x = element_text(size = 14),        # Ændrer størrelsen på x-aksetitlen
    axis.title.y = element_text(size = 14),        # Ændrer størrelsen på y-aksetitlen
    axis.text.x = element_text(size = 12),         # Ændrer størrelsen på x-akse tekst (ticks)
    axis.text.y = element_text(size = 12)) +  # Ændrer størrelsen på y-akse tekst (ticks) 
  coord_flip() # Roterer akserne
```
:::

------------------------------------------------------------------------

# Typer af plots

Der findes mange typer af plots eller ***geoms***, som er gode til forskellige ting. Her er et par grundlæggende:

[Visualisering af én variabel]{.underline}

-   Brug `geom_bar()` til kategoriske variable

-   Brug `geom_histogram()` til nummeriske variable

[Visualisering af flere variable]{.underline}

-   Brug `geom_bar()` eller `geom_jitter()` til to kategoriske variable

-   Brug `geom_boxplot` til en interval variabel og en kategoriske variabel.

-   Brug `geom_point()` til to interval variable.

------------------------------------------------------------------------

# Barplot (univariat)

Variablen ***cyl*** (antal cylindre), som er en diskret variabel, kan visualiseres via. et barplot:

::: panel-tabset
### Plot

```{r echo=F, fig.width=6, fig.height=3}
ggplot(mtcars) +
  aes(x = factor(cyl)) +  # Omform cyl til en kategorisk variabel
  geom_bar() +
  labs(
    title = "Antal biler pr. antal cylindere",
    x = "Antal cylindre",
    y = "Antal biler"
  ) +
  theme_minimal()
```

### Kode

```{r echo=T, eval=F}
ggplot(mtcars) +
  aes(x = factor(cyl)) +  # Omform cyl til en kategorisk variabel
  geom_bar() +
  labs(
    title = "Antal biler pr. antal cylindere",
    x = "Antal cylindre",
    y = "Antal biler"
  ) +
  theme_minimal()
```
:::

------------------------------------------------------------------------

# Barplot (univariat)

Variablen ***mpg*** (miles per gallon), som er en numerisk, kan visualiseres via. et histogram:

::: panel-tabset
### Plot

```{r echo=F, fig.width=6, fig.height=3}
ggplot(mtcars) +
  aes(x = mpg) +
  geom_histogram(binwidth = 2, fill = "#003366", color = "black") +
  labs(
    title = "Histogram af brændstoføkonomi",
    x = "Miles per gallon (mpg)",
    y = "Antal biler"
  ) +
  theme_minimal()
```

### Kode

```{r echo=T, eval=F}
ggplot(mtcars) +
  aes(x = mpg) +
  geom_histogram(binwidth = 2, fill = "#003366", color = "black") +
  labs(
    title = "Histogram af brændstoføkonomi",
    x = "Miles per gallon (mpg)",
    y = "Antal biler"
  ) +
  theme_minimal()
```
:::

------------------------------------------------------------------------

# Barplot (bivariat)

Vi kan visualisere sammenhængen mellem variablene **cyl** (antal cylindre) og **gear** (antal gear), som begge er kategoriske variabler via `barplot()`:

::: panel-tabset
### Plot

```{r echo=F, fig.width=6, fig.height=3}
ggplot(mtcars) +
  aes(x = factor(cyl), fill = factor(gear)) +
  geom_bar(position = "dodge") +
  labs(
    title = "Fordeling af biler pr. cylinder og gear",
    x = "Antal cylindre",
    y = "Antal biler",
    fill = "Antal gear"
  ) +
  theme_minimal()
```

### Kode

```{r echo=T, eval=F}
ggplot(mtcars) +
  aes(x = factor(cyl), fill = factor(gear)) +
  geom_bar(position = "dodge") +
  labs(
    title = "Fordeling af biler pr. cylinder og gear",
    x = "Antal cylindre",
    y = "Antal biler",
    fill = "Antal gear"
  ) +
  theme_minimal()
```
:::

------------------------------------------------------------------------

# Scatterplot (bivariat)

Vi kan også visualisere sammenhængen mellem **cyl** (antal cylindre) og **gear** (antal gear) via `geom_jitter()`. Et jitter-plot er en variant af et scatterplot, hvor punkterne bliver "spredt" (jittered) lidt tilfældigt, når de overlapper hinanden:

::: panel-tabset
### Plot

```{r echo=F, fig.width=6, fig.height=3}
ggplot(mtcars) +
  aes(x = factor(cyl), y = factor(gear)) +
  geom_jitter(width = 0.2, height = 0.2) +
  labs(
    title = "Spredning af biler mellem cylinder og gear",
    x = "Antal cylindre",
    y = "Antal gear"
  ) 
```

### Kode

```{r echo=T, eval=F}
ggplot(mtcars) +
  aes(x = factor(cyl), fill = factor(gear)) +
  geom_bar(position = "dodge") +
  labs(
    title = "Fordeling af biler pr. cylinder og gear",
    x = "Antal cylindre",
    y = "Antal biler",
    fill = "Antal gear"
  ) +
  theme_minimal()
```
:::

------------------------------------------------------------------------

# Boksplot (bivariat)

Vi kan bruge et boksplot til at se fordelingen af variablene **mpg** (interval) over **cyl** (kategorisk):

::: panel-tabset
### Plot

```{r echo=F, fig.width=6, fig.height=3}
ggplot(mtcars) +
  aes(x = factor(cyl), y = mpg) +
  geom_boxplot() +
  labs(
    title = "Brændstoføkonomi pr. cylinder",
    x = "Antal cylindre",
    y = "Miles per gallon"
  ) +
  theme_minimal()
```

### Kode

```{r echo=T, eval=F}
ggplot(mtcars) +
  aes(x = factor(cyl), y = mpg) +
  geom_boxplot() +
  labs(
    title = "Brændstoføkonomi pr. cylinder",
    x = "Antal cylindre",
    y = "Miles per gallon"
  ) +
  theme_minimal()
```
:::

------------------------------------------------------------------------

# Scatterplot (bivariat)

Og vi kan bruge et scatterplot til at se sammenhængen mellem variablene **wt** (vægt) og **mpg** (miles per gallon), som begge er numeriske variabler med `geom_point()`:

::: panel-tabset
### Plot

```{r echo=F, fig.width=6, fig.height=3}
ggplot(mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Sammenhæng mellem vægt og brændstoføkonomi",
    x = "Vægt (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal()
```

### Kode

```{r echo=T, eval=F}
ggplot(mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  labs(
    title = "Sammenhæng mellem vægt og brændstoføkonomi",
    x = "Vægt (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal()
```
:::

------------------------------------------------------------------------

# Scatterplot (bivariat) med regressionslinje

Det er også muligt at lægge flere plots ovenpå hinanden med ggplot. F.eks. kan I (senere hen) lægge en regressionslinje indover jeres scatterplot med `geom_smooth()` :

::: panel-tabset
### Plot

```{r echo=F, fig.width=6, fig.height=3}
ggplot(mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
  labs(
    title = "Sammenhæng mellem vægt og brændstoføkonomi",
    x = "Vægt (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal()
```

### Kode

```{r echo=T, eval=F}
ggplot(mtcars) +
  aes(x = wt, y = mpg) +
  geom_point() +
  geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
  labs(
    title = "Sammenhæng mellem vægt og brændstoføkonomi",
    x = "Vægt (1000 lbs)",
    y = "Miles per gallon"
  ) +
  theme_minimal()
```
:::

------------------------------------------------------------------------

# Mere om ggplot

Eksemplerne her giver jer nogle skabeloner til at arbejde med en række grundlæggende plots, men mulighederne for at justere på dem og gøre dem flotte er uendelige!

-   Brug [ggplot-bogen](https://ggplot2-book.org/)

-   Kig på [ggplot2 cheatsheet](https://posit.co/wp-content/uploads/2022/10/data-visualization-1.pdf)

-   Søg hjælp hos ChatGPT, der kan fejlsøge i din kode
