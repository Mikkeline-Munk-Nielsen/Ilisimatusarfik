aes(x = "", y = mpg) +  # "" for at undgå en x-akse kategori, og y for at angive mpg
geom_boxplot(fill = "#003366", color = "black") +  # Ændring af farver
labs(
title = "Boksplot af brændstoføkonomi",
x = "",  # Tomt for at undgå en x-akse etiket
y = "Miles per gallon (mpg)"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), fill = factor(gear)) +
geom_bar(position = "dodge") +
labs(
title = "Fordeling af biler pr. cylinder og gear",
x = "Antal cylindre",
y = "Antal biler",
fill = "Antal gear"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = factor(gear)) +
geom_jitter(width = 0.2, height = 0.2) +
labs(
title = "Spredning af biler mellem cylinder og gear",
x = "Antal cylindre",
y = "Antal gear"
)
library(ggplot2)
ggplot(mtcars) +
aes(x = factor(cyl), y = mpg) +
geom_boxplot() +
labs(
title = "Brændstoføkonomi pr. cylinder",
x = "Antal cylindre",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
ggplot(mtcars) +
aes(x = wt, y = mpg) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Tilføjer en lineær regressionslinje
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ttest_resultat_univariat <- t.test(df$alder, mu = 42.8)
# Opret en data frame med de ønskede metrics i rækker
(ttest_tabel_univariat <- data.frame(
Parameter = c("Gennemsnit",                # Gennemsnittet af prøven
"Test-statistik",               # Teststatistikken (t-værdien)
"P-værdi",                      # P-værdien med 4 decimaler
"Nedre konfidensinterval",      # Nedre konfidensinterval for konfidensintervallet
"Øvre konfidensinterval",       # Øvre konfidensinterval for konfidensintervallet
"Frihedsgrader"),               # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat_univariat$estimate, 3),       # Gennemsnittet afrundet til 3 decimaler
round(ttest_resultat_univariat$statistic, 3),      # Teststatistikken afrundet til 3 decimaler
sprintf("%.3f", ttest_resultat_univariat$p.value), # P-værdi med 3 decimaler
round(ttest_resultat_univariat$conf.int[1], 3),    # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_univariat$conf.int[2], 3),    # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_univariat$parameter, 1)       # Frihedsgrader afrundet til 1 decimal
)
))
library(ggplot2)
ggplot(df) +
aes(x = carat, y = price) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
library(ggplot2)
df <- diamonds
names(df)
library(ggplot2)
ggplot(df) +
aes(x = carat, y = price) +
geom_point() +
labs(
title = "Sammenhæng mellem vægt og brændstoføkonomi",
x = "Vægt (1000 lbs)",
y = "Miles per gallon"
) +
theme_minimal()
ggplot(df) +
aes(x = carat, y = price) +
geom_point() +
labs(
title = "Sammenhæng mellem carat og pris",
x = "Carat",
y = "Pris"
) +
theme_minimal()
library(ggplot2)
ggplot(df) +
aes(x = carat, y = price) +
geom_point() +
labs(
title = "Sammenhæng mellem carat og pris",
x = "Carat",
y = "Pris (USD)"
) +
theme_minimal()
ggplot(df) +
aes(x = carat, y = price) +
geom_point(color="red") +
labs(
title = "Sammenhæng mellem carat og pris",
x = "Carat",
y = "Pris (USD)"
) +
theme_minimal()
library(ggplot2)
ggplot(df) +
aes(x = carat, y = price) +
geom_point(color="#003366") +
labs(
title = "Sammenhæng mellem carat og pris",
x = "Carat",
y = "Pris (USD)"
) +
theme_minimal()
cor.test(df$price, df$carat)
library(dplyr)
diamonds_filtered <- diamonds %>%
filter(cut %in% c("Ideal", "Premium"))
# Udfør t-test
ttest_resultat_bivariat <- t.test(price ~ cut, data = diamonds_filtered)
# Opret en tabel med resultaterne
(ttest_tabel_bivariat <- data.frame(
Parameter = c("Gennemsnit Gruppe 1",        # Gennemsnit for første gruppe
"Gennemsnit Gruppe 2",        # Gennemsnit for anden gruppe
"Test-statistik",             # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien
"Nedre konfidensinterval",    # Nedre konfidensinterval
"Øvre konfidensinterval",     # Øvre konfidensinterval
"Frihedsgrader"),             # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat_bivariat$estimate[1], 2),     # Gennemsnittet for første gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$estimate[2], 2),     # Gennemsnittet for anden gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$statistic, 3),       # Teststatistikken afrundet til 3 decimaler
sprintf("%.4f", ttest_resultat_bivariat$p.value),  # P-værdien med 4 decimaler
round(ttest_resultat_bivariat$conf.int[1], 3),     # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$conf.int[2], 3),     # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$parameter, 1)        # Frihedsgrader afrundet til 1 decimal
)
))
# Udfør t-test
ttest_resultat_bivariat <- t.test(price ~ cut, data = diamonds_filtered)
# Opret en tabel med resultaterne
(ttest_tabel_bivariat <- data.frame(
Parameter = c("Gennemsnit Gruppe 1",        # Gennemsnit for første gruppe
"Gennemsnit Gruppe 2",        # Gennemsnit for anden gruppe
"Test-statistik",             # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien
"Nedre konfidensinterval",    # Nedre konfidensinterval
"Øvre konfidensinterval",     # Øvre konfidensinterval
"Frihedsgrader"),             # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat_bivariat$estimate[1], 2),     # Gennemsnittet for første gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$estimate[2], 2),     # Gennemsnittet for anden gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$statistic, 3),       # Teststatistikken afrundet til 3 decimaler
sprintf("%.4f", ttest_resultat_bivariat$p.value),  # P-værdien med 4 decimaler
round(ttest_resultat_bivariat$conf.int[1], 3),     # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$conf.int[2], 3),     # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$parameter, 1)        # Frihedsgrader afrundet til 1 decimal
)
))
# Udfør t-test
ttest_resultat_bivariat <- t.test(price ~ cut, data = diamonds_filtered)
# Opret en tabel med resultaterne
(ttest_tabel_bivariat <- data.frame(
Parameter = c("Gennemsnit Gruppe 1",        # Gennemsnit for første gruppe
"Gennemsnit Gruppe 2",        # Gennemsnit for anden gruppe
"Test-statistik",             # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien
"Nedre konfidensinterval",    # Nedre konfidensinterval
"Øvre konfidensinterval",     # Øvre konfidensinterval
"Frihedsgrader"),             # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat_bivariat$estimate[1], 2),     # Gennemsnittet for første gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$estimate[2], 2),     # Gennemsnittet for anden gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$statistic, 3),       # Teststatistikken afrundet til 3 decimaler
sprintf("%.4f", ttest_resultat_bivariat$p.value),  # P-værdien med 4 decimaler
round(ttest_resultat_bivariat$conf.int[1], 3),     # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$conf.int[2], 3),     # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$parameter, 1)        # Frihedsgrader afrundet til 1 decimal
)
))
# Udfør t-test
ttest_resultat_bivariat <- t.test(cut ~ price, data = diamonds_filtered)
# Udfør t-test
ttest_resultat_bivariat <- t.test(price ~ cut, data = diamonds_filtered)
# Opret en tabel med resultaterne
(ttest_tabel_bivariat <- data.frame(
Parameter = c("Gennemsnit Gruppe 1",        # Gennemsnit for første gruppe
"Gennemsnit Gruppe 2",        # Gennemsnit for anden gruppe
"Test-statistik",             # Teststatistikken (t-værdien)
"P-værdi",                    # P-værdien
"Nedre konfidensinterval",    # Nedre konfidensinterval
"Øvre konfidensinterval",     # Øvre konfidensinterval
"Frihedsgrader"),             # Frihedsgrader (df)
Værdi = c(
round(ttest_resultat_bivariat$estimate[1], 2),     # Gennemsnittet for første gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$estimate[2], 2),     # Gennemsnittet for anden gruppe afrundet til 3 decimaler
round(ttest_resultat_bivariat$statistic, 3),       # Teststatistikken afrundet til 3 decimaler
sprintf("%.4f", ttest_resultat_bivariat$p.value),  # P-værdien med 4 decimaler
round(ttest_resultat_bivariat$conf.int[1], 3),     # Nedre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$conf.int[2], 3),     # Øvre konfidensinterval afrundet til 3 decimaler
round(ttest_resultat_bivariat$parameter, 1)        # Frihedsgrader afrundet til 1 decimal
)
))
library(dplyr)
library(janitor)
# Udfør chi²-test
chi_resultat_bivariat <- df %>%
select(color, cut) %>%
na.omit() %>%
tabyl(color, cut) %>%
chisq.test()
# Opret en data frame med chi²-testens resultater
(chi_tabel_bivariat <- data.frame(
Parameter = c("Chi²-statistik",              # Testens Chi²-statistik
"Frihedsgrader",              # Frihedsgrader (df)
"P-værdi"),                   # P-værdi
Værdi = c(
round(chi_resultat_bivariat$statistic, 3),         # Chi²-statistikken afrundet til 3 decimaler
chi_resultat_bivariat$parameter,                   # Frihedsgrader
sprintf("%.4f", chi_resultat_bivariat$p.value)    # P-værdien formatteret til 4 decimaler
)))
library(ggplot2)
df <- diamonds
names(df)
library(ggplot2)
ggplot(df) +
aes(x = carat, y = price) +
geom_point(color="#003366") +
labs(
title = "Sammenhæng mellem carat og pris",
x = "Carat",
y = "Pris (USD)"
) +
theme_minimal()
cor.test(df$price, df$carat)
library(dplyr)
diamonds_filtered <- diamonds %>%
filter(cut %in% c("Ideal", "Premium"))
# Udfør t-test
ttest_resultat_bivariat <- t.test(price ~ cut, data = diamonds_filtered)
ttest_resultat_bivariat
necessary libraries
ibrary(ggplot2)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Calculate the average price by cut
average_price_by_cut <- diamonds %>%
group_by(cut) %>%
summarise(average_price = mean(price))
# Create the plot
ggplot(average_price_by_cut, aes(x = cut, y = average_price)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(
title = "Average Price of Diamonds by Cut",
x = "Diamond Cut",
y = "Average Price (USD)"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ttest_resultat_bivariat
tinytex::tlmgr_install(c("fancyvrb", "listings", "minted"))
--all
2+2
getwd()
df <- readRDS("ESS.rds")
getwd()
df <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds") # Her hentes datasættet
library(tidyverse)
df <- filter(df, land=="DK")
getwd()
df <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Data/ESS.rds") # Her hentes datasættet
library(tidyverse)
df <- filter(df, land=="DK")
df <- df %>% select(net_indkomst, antal_timer_arb, udd_aar) %>% na.omit()
library(ggplot2)
ggplot(df) +
aes(x = udd_aar, y = net_indkomst) +
geom_point() +
labs(
title = "Sammenhæng mellem antal års uddannelse og indkomst",
x = "Antal års uddannelse",
y = "Indkomst DKK (netto)"
) +
theme_minimal()
ggplot(df) +
aes(x = udd_aar, y = net_indkomst) +
geom_point() +
labs(
title = "Sammenhæng mellem antal års uddannelse og indkomst",
x = "Antal års uddannelse",
y = "Indkomst DKK (netto)"
) +
theme_minimal() +
geom_smooth(method = "lm", color = "blue", se = FALSE)
ESS <- readRDS("C:/Users/mmn/Downloads/ESS.rds")
df <- ESS
library(tidyverse)
df <- filter(df, land=="DK")
df <- df %>% select(net_indkomst, antal_timer_arb, udd_aar) %>% na.omit()
library(ggplot2)
ggplot(df) +
aes(x = udd_aar, y = net_indkomst) +
geom_point() +
labs(
title = "Sammenhæng mellem antal års uddannelse og indkomst",
x = "Antal års uddannelse",
y = "Indkomst DKK (netto)"
) +
theme_minimal()
cor.test(df$udd_aar, df$net_indkomst)
ggplot(df) +
aes(x = udd_aar, y = net_indkomst) +
geom_point() +
labs(
title = "Sammenhæng mellem antal års uddannelse og indkomst",
x = "Antal års uddannelse",
y = "Indkomst DKK (netto)"
) +
theme_minimal() +
geom_smooth(method = "lm", color = "blue", se = FALSE)
library(texreg)
model1 <- lm(net_indkomst ~ udd_aar, data = df)
(texreg::screenreg(list(model1), include.ci=F))
10650.70 + 395.24*15
model2 <- lm(net_indkomst ~ udd_aar +antal_timer_arb, data = df)
(texreg::screenreg(list(model1, model2), include.ci=F))
2057.61+(362.01*13)+(251.75*40)
2057.61+(362.01*18)+(251.75*40)
2057.61+(362.01*18)+(251.75*40)
setwd("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Eksamen_F24")
df <- readRDS("Reeksamen/Reeksamensdata_F24.rds")
# Middelværdi og median
summary(df$indkomst)
# Standardafvigelse
sd(df$indkomst, na.rm = TRUE)
# Middelværdi og median
summary(df$indkomst)
# Standardafvigelse
sd(df$indkomst, na.rm = TRUE)
# Middelværdi og median
summary(df$indkomst)
# Standardafvigelse
sd(df$indkomst, na.rm = TRUE)
# Standardafvigelse
sd(df$indkomst, na.rm = TRUE)
# Konfidensintervaller
t.test(df$indkomst)
# Konfidensintervaller
t.test(df$indkomst)
library(janitor)
tabyl(df$avis_forbrug)
tabyl(df$avis_forbrug)
library(ggplot2)
ggplot(df, aes(avis_forbrug)) +
geom_bar()
ggplot(df, aes(avis_forbrug)) +
geom_bar()
library(dplyr)
cor.test(as.numeric(df$alder),
as.numeric(df$avis_forbrug),
method = "spearman"
)
df %>%
na.omit() %>% # udeluk missing værdier
tabyl(udd_kat, avis_forbrug) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 2)
df %>%
na.omit() %>% # udeluk missing værdier
tabyl(udd_kat, avis_forbrug) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
df %>%
na.omit() %>% # udeluk missing værdier
tabyl(udd_kat, avis_forbrug) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
df %>%
na.omit() %>% # udeluk missing værdier
tabyl(udd_kat, avis_forbrug) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
library(tidyverse)
format.pval(chi_test$p.value, scientific = FALSE)
(chi_test <- df %>%
select(udd_kat, avis_forbrug ) %>%
na.omit() %>%
tabyl(udd_kat, avis_forbrug ) %>%
chisq.test())
format.pval(chi_test$p.value, scientific = FALSE)
model1 <- lm(indkomst ~ leder, data=df)
(texreg::screenreg(list(model1), include.ci = FALSE))
-1879.96 + (1*9232.30)+(40*837.48)
(texreg::screenreg(list(model1, model2, model3), include.ci = FALSE))
setwd("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Eksamen_F24")
df <- readRDS("Reeksamen/Reeksamensdata_F24.rds")
# Middelværdi og median
summary(df$indkomst)
# Standardafvigelse
sd(df$indkomst, na.rm = TRUE)
# Konfidensintervaller
t.test(df$indkomst)
library(janitor)
tabyl(df$avis_forbrug)
library(ggplot2)
ggplot(df, aes(avis_forbrug)) +
geom_bar()
library(dplyr)
cor.test(as.numeric(df$alder),
as.numeric(df$avis_forbrug),
method = "spearman"
)
df %>%
na.omit() %>% # udeluk missing værdier
tabyl(udd_kat, avis_forbrug) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
library(tidyverse)
(chi_test <- df %>%
select(udd_kat, avis_forbrug ) %>%
na.omit() %>%
tabyl(udd_kat, avis_forbrug ) %>%
chisq.test())
format.pval(chi_test$p.value, scientific = FALSE)
model1 <- lm(indkomst ~ leder, data=df)
(texreg::screenreg(list(model1), include.ci = FALSE))
model2 <- lm(indkomst ~ leder+arbejdstimer, data=df)
(texreg::screenreg(list(model1, model2), include.ci = FALSE))
-1879.96 + (1*9232.30)+(40*837.48)
model3 <- lm(indkomst ~ leder + arbejdstimer + branche, data=df)
(texreg::screenreg(list(model1, model2, model3), include.ci = FALSE))
(texreg::screenreg(list(model1, model2, model3), include.ci = FALSE))
df %>%
na.omit() %>% # udeluk missing værdier
tabyl(avis_forbrug, udd_kat) %>%
adorn_totals(where = c("row", "col")) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 1)
library(ggplot2)
ggplot(df, aes(avis_forbrug)) +
geom_bar() +
labs(
title = "Antal biler pr. antal cylindere",
x = "Antal cylindre",
y = "Antal biler"
) +
theme_minimal() + coord_flip()
library(ggplot2)
ggplot(df, aes(avis_forbrug)) +
geom_bar() +
labs(
title = "Avisforbrug",
x = "Frekvens",
) +
theme_minimal() + coord_flip()
library(ggplot2)
ggplot(df, aes(avis_forbrug)) +
geom_bar() +
labs(
title = "Avisforbrug",
y = "Frekvens",
x = ""
) +
theme_minimal() + coord_flip()
df <- readRDS("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Eksamen_F24/Reeksamen/Reeksamensdata_F25.rds")
# Middelværdi og median
summary(df$indkomst)
# Standardafvigelse
sd(df$indkomst, na.rm = TRUE)
library(ggplot2)
ggplot(df, aes(avis_forbrug)) +
geom_bar() +
labs(
title = "Avisforbrug",
y = "Frekvens",
x = ""
) +
theme_minimal() + coord_flip()
(texreg::screenreg(list(model1, model2, model3), include.ci = FALSE))
setwd("C:/Users/mmn/Dropbox/Ilisimatusarfik/R/Ilisimatusarfik_Statistik_EO_F24/Eksamen_F24")
df <- readRDS("Reeksamen/Reeksamensdata_F24.rds")
